# TODO : 
import os
import sys
import json
import fitz
import shutil
from PIL import Image
from datetime import datetime
from dotenv import load_dotenv
import tempfile
import requests
import logging
# –≤–µ—Å—å –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Å–ª–æ–∂–Ω–æ –Ω–æ –º–æ–∂–Ω–æ
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QSize, QTimer
from PyQt6.QtGui import QPixmap, QIcon
from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QWidget, QListWidget, 
                            QPushButton, QFileDialog, QMessageBox, QLabel, QHBoxLayout,
                            QScrollArea, QListWidgetItem, QSizePolicy, QComboBox, 
                            QLineEdit, QDialog, QFormLayout, QDialogButtonBox, QTabWidget,
                            QTableWidget, QTableWidgetItem, QHeaderView, QTextEdit, QProgressBar)
from urllib.parse import quote
from telethon import TelegramClient
from telethon.tl.types import InputMessagesFilterDocument, InputMessagesFilterPhotos
load_dotenv()
from telethon.errors import SessionPasswordNeededError
import asyncio
import qasync
from qasync import QEventLoop, asyncSlot, asyncClose

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_sync.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('TelegramSync')

class TelegramSyncDialog(QDialog):
    def __init__(self, document_manager):
        super().__init__(document_manager)
        self.document_manager = document_manager
        self.setWindowTitle("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Telegram")
        self.setFixedSize(500, 400)
        self.setStyleSheet("""
            QDialog {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
            }
            QProgressBar {
                border: 1px solid #555555;
                border-radius: 5px;
                background-color: #353535;
                text-align: center;
                color: white;
            }
            QProgressBar::chunk {
                background-color: #4a6fa5;
                border-radius: 4px;
            }
            QTextEdit {
                background-color: #353535;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 3px;
                padding: 5px;
            }
            QPushButton {
                background-color: #4a6fa5;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a7fb5;
            }
            QPushButton:disabled {
                background-color: #555555;
                color: #888888;
            }
        """)
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel(
            "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ Telegram —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∞—Ä—Ö–∏–≤–µ.\n\n"
            "‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±–æ—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –±–æ—Ç–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        )
        info_label.setWordWrap(True)
        info_label.setStyleSheet("padding: 10px; background-color: #2b5278; border-radius: 5px;")
        layout.addWidget(info_label)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        self.status_label.setStyleSheet("font-weight: bold; padding: 5px;")
        layout.addWidget(self.status_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # –õ–æ–≥
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(200)
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        self.sync_btn = QPushButton("–ù–∞—á–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
        self.sync_btn.clicked.connect(self.start_sync)
        
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)
        
        button_layout.addWidget(self.sync_btn)
        button_layout.addWidget(self.cancel_btn)
        layout.addLayout(button_layout)
        
        # –ü–æ—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_thread = None
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.append(f"[{timestamp}] {message}")
        QApplication.processEvents()  # –û–±–Ω–æ–≤–ª—è–µ–º UI
    
    def start_sync(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if not self.document_manager.telegram_storage.test_connection():
            self.log("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
            return
        
        self.sync_btn.setEnabled(False)
        self.cancel_btn.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.sync_thread = TelegramSyncThread(self.document_manager)
        self.sync_thread.progress_update.connect(self.update_progress)
        self.sync_thread.status_update.connect(self.update_status)
        self.sync_thread.finished.connect(self.sync_finished)
        self.sync_thread.start()
    
    def update_progress(self, value, maximum):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.setMaximum(maximum)
        self.progress_bar.setValue(value)
    
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.setText(message)
        self.log(message)
    
    def sync_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.sync_btn.setEnabled(True)
        self.cancel_btn.setEnabled(True)
        self.status_label.setText("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.log("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
        self.document_manager.load_documents()

class TelegramSyncThread(QThread):
    progress_update = pyqtSignal(int, int)
    status_update = pyqtSignal(str)
    
    def __init__(self, document_manager):
        super().__init__()
        self.document_manager = document_manager
        self.storage = document_manager.telegram_storage
        self.user_client = document_manager.telegram_user_client
        self.is_running = True
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            self.status_update.emit("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Telegram...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            messages = self.get_chat_history()
            if not messages:
                self.status_update.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–ª–∏ —á–∞—Ç –ø—É—Å—Ç")
                return
            
            self.status_update.emit(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            document_messages = [
                msg for msg in messages 
                if hasattr(msg, 'document') or hasattr(msg, 'photo')
            ]
            
            self.status_update.emit(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(document_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏/—Ñ–æ—Ç–æ")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
            local_data = self.document_manager.load_data()
            local_files = {doc['filename']: doc for doc in local_data['documents']}
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            downloaded_count = 0
            self.progress_update.emit(0, len(document_messages))
            
            for i, message in enumerate(document_messages):
                if not self.is_running:
                    break
                    
                try:
                    self.status_update.emit(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}/{len(document_messages)}")
                    result = self.process_message(message, local_files, local_data)
                    if result:
                        downloaded_count += 1
                        self.status_update.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {result}")
                    else:
                        filename = "Unknown"
                        if hasattr(message, 'document') and message.document:
                            filename = getattr(message.document, 'attributes', [{}])[0].file_name if hasattr(message.document, 'attributes') and message.document.attributes else f"document_{message.id}"
                        elif hasattr(message, 'photo') and message.photo:
                            filename = f"photo_{message.id}.jpg"
                        self.status_update.emit(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {filename}")
                    
                except Exception as e:
                    self.status_update.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                
                self.progress_update.emit(i + 1, len(document_messages))
            
            self.status_update.emit(f"üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {downloaded_count}")
            
        except Exception as e:
            self.status_update.emit(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    def get_chat_history(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ User API"""
        try:
            self.status_update.emit("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ User API...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loop –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            self.user_client.set_event_loop(loop)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            success, message = loop.run_until_complete(self.user_client.test_connection())
            
            if not success:
                self.status_update.emit(f"‚ùå {message}")
                loop.run_until_complete(self.user_client.disconnect())
                loop.close()
                return []
            
            self.status_update.emit("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            messages, status_message = loop.run_until_complete(
                self.user_client.get_chat_history(self.storage.chat_id, limit=1000)
            )
            
            self.status_update.emit(f"üì® {status_message}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop
            loop.run_until_complete(self.user_client.disconnect())
            loop.close()
            
            return messages if messages else []
            
        except Exception as e:
            self.status_update.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            return []
    
    def process_message(self, message, local_files, local_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ file_id
            file_info = None
            file_type = None
            file_name = None
            file_id = None
            
            if hasattr(message, 'document') and message.document:
                file_info = message.document
                file_type = 'document'
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                file_name = getattr(file_info, 'attributes', [{}])[0].file_name if hasattr(file_info, 'attributes') and file_info.attributes else f"document_{file_info.id}"
                file_id = str(file_info.id)
            elif hasattr(message, 'photo') and message.photo:
                # –î–ª—è —Ñ–æ—Ç–æ –±–µ—Ä–µ–º —Å–∞–º—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                file_info = message.photo
                file_type = 'photo'
                file_name = f"photo_{file_info.id}.jpg"
                file_id = str(file_info.id)
            else:
                return None
            
            if not file_info:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –ø–æ file_id
            for doc in local_data['documents']:
                if doc.get('telegram_file_id') == file_id:
                    return None
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            downloaded_path = self.download_file(file_id, file_name, file_type)
            if not downloaded_path:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ caption –∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            metadata = self.extract_metadata(
                getattr(message, 'caption', '') or '',
                getattr(message, 'text', '') or ''
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
            doc_data = {
                'filename': file_name,
                'path': downloaded_path,
                'type': metadata.get('type', 'unknown'),
                'doc_number': metadata.get('doc_number', ''),
                'doc_date': metadata.get('doc_date', ''),
                'sender': metadata.get('sender', ''),
                'executor': metadata.get('executor', ''),
                'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'size': os.path.getsize(downloaded_path),
                'telegram_file_id': file_id,
                'telegram_message_id': message.id,
                'sync_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            local_data['documents'].append(doc_data)
            self.document_manager.save_data(local_data)
            
            return file_name
            
        except Exception as e:
            self.status_update.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None
    
    def download_file(self, file_id, file_name, file_type):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram —á–µ—Ä–µ–∑ Bot API"""
        try:
            self.status_update.emit(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_name}")
            
            # –î–ª—è User API –Ω–∞–º –Ω—É–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Bot API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if not self.storage.token:
                self.status_update.emit("‚ùå –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è Bot Token")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            url = f"https://api.telegram.org/bot{self.storage.token}/getFile"
            response = requests.post(url, data={'file_id': file_id}, timeout=30)
            
            if response.status_code != 200:
                self.status_update.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è file info: {response.status_code}")
                return None
            
            file_data = response.json()
            if not file_data.get('ok'):
                self.status_update.emit(f"‚ùå –û—à–∏–±–∫–∞ file data: {file_data.get('description')}")
                return None
            
            file_path = file_data['result']['file_path']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            download_url = f"https://api.telegram.org/file/bot{self.storage.token}/{file_path}"
            file_response = requests.get(download_url, timeout=60)
            
            if file_response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
                sync_dir = os.path.join(self.document_manager.base_dir, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
                os.makedirs(sync_dir, exist_ok=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if '.' in file_name and file_type == 'document':
                    final_path = os.path.join(sync_dir, file_name)
                else:
                    # –î–ª—è —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    extension = self.get_file_extension(file_response.headers.get('content-type', ''))
                    final_path = os.path.join(sync_dir, f"{file_name}{extension}")
                
                with open(final_path, 'wb') as f:
                    f.write(file_response.content)
                
                self.status_update.emit(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(final_path)}")
                return final_path
            else:
                self.status_update.emit(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {file_response.status_code}")
                return None
            
        except Exception as e:
            self.status_update.emit(f"üí• –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_name}: {e}")
            return None
    
    def get_file_extension(self, content_type):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ content-type"""
        extension_map = {
            'image/jpeg': '.jpg',
            'image/png': '.png',
            'image/gif': '.gif',
            'application/pdf': '.pdf',
            'application/msword': '.doc',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
            'text/plain': '.txt'
        }
        return extension_map.get(content_type, '.bin')
    
    def extract_metadata(self, caption, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        metadata = {}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º caption –∏ text –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        content = f"{caption} {text}".strip()
        
        if not content:
            return metadata
        
        # –ü–∞—Ä—Å–∏–º HTML/—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        lines = content.replace('<b>', '').replace('</b>', '').split('\n')
        
        for line in lines:
            line = line.strip()
            line_lower = line.lower()
            
            if '–≤—Ö–æ–¥—è—â–∏–π' in line_lower:
                metadata['type'] = 'incoming'
            elif '–∏—Å—Ö–æ–¥—è—â–∏–π' in line_lower:
                metadata['type'] = 'outgoing'
            elif '–Ω–æ–º–µ—Ä:' in line_lower:
                metadata['doc_number'] = line.split(':', 1)[1].strip()
            elif '–¥–∞—Ç–∞:' in line_lower:
                metadata['doc_date'] = line.split(':', 1)[1].strip()
            elif '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:' in line_lower:
                metadata['sender'] = line.split(':', 1)[1].strip()
            elif '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:' in line_lower:
                metadata['executor'] = line.split(':', 1)[1].strip()
        
        return metadata
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False

class TelegramUserClient:
    def __init__(self):
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        self.session_file = 'telegram_session'
        self.client = None
        self.is_authorized = False
        self.loop = None
    
    def set_event_loop(self, loop):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ event loop –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.loop = loop
        asyncio.set_event_loop(loop)
    
    async def _get_client(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.client:
            self.client = TelegramClient(self.session_file, self.api_id, self.api_hash)
            await self.client.connect()
        return self.client
    
    async def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            if not self.api_id or not self.api_hash:
                return False, "API ID –∏ API Hash –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            
            client = await self._get_client()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            if os.path.exists(f'{self.session_file}.session'):
                try:
                    if await client.is_user_authorized():
                        self.is_authorized = True
                        return True, "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ—Å—Å–∏–∏"
                    else:
                        return False, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                except Exception as e:
                    return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {str(e)}"
            else:
                return False, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
    
    async def authorize(self, phone=None, code=None, password=None):
        """–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            client = await self._get_client()
            
            if not await client.is_user_authorized():
                if phone:
                    self.phone = phone
                    await client.send_code_request(self.phone)
                    return "code_required"
                elif code:
                    try:
                        await client.sign_in(self.phone, code)
                        self.is_authorized = True
                        return "authorized"
                    except SessionPasswordNeededError:
                        return "password_required"
                elif password:
                    await client.sign_in(password=password)
                    self.is_authorized = True
                    return "authorized"
            else:
                self.is_authorized = True
                return "authorized"
                
        except Exception as e:
            return f"error: {str(e)}"
    
    async def get_chat_history(self, chat_id, limit=1000):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        try:
            if not self.is_authorized:
                return None, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            
            client = await self._get_client()
            
            # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞
            try:
                chat = await client.get_entity(chat_id)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –ø–æ username
                try:
                    chat = await client.get_entity(chat_id)
                except Exception as e:
                    return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç: {str(e)}"
            
            messages = []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            async for message in client.iter_messages(chat, limit=limit, filter=InputMessagesFilterDocument):
                messages.append(message)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
            async for message in client.iter_messages(chat, limit=limit, filter=InputMessagesFilterPhotos):
                messages.append(message)
            
            return messages, f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            await self.client.disconnect()
            self.client = None

class TelegramAuthDialog(QDialog):
    def __init__(self, user_client, parent=None):
        super().__init__(parent)
        self.user_client = user_client
        self.setWindowTitle("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram")
        self.setFixedSize(400, 300)
        self.setStyleSheet("""
            QDialog {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
            }
            QLineEdit, QPushButton {
                background-color: #353535;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 3px;
                padding: 8px;
            }
            QPushButton {
                background-color: #4a6fa5;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a7fb5;
            }
            QPushButton:disabled {
                background-color: #555555;
            }
        """)
        self.auth_stage = "initial"  # initial, code_required, password_required
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.info_label = QLabel(
            "–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram.\n\n"
            "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—è."
        )
        self.info_label.setWordWrap(True)
        self.info_label.setStyleSheet("padding: 10px; background-color: #2b5278; border-radius: 5px;")
        layout.addWidget(self.info_label)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        form_layout = QFormLayout()
        
        self.phone_edit = QLineEdit()
        self.phone_edit.setPlaceholderText("+79123456789")
        self.phone_edit.setText(os.getenv('TELEGRAM_PHONE', ''))
        
        self.code_edit = QLineEdit()
        self.code_edit.setPlaceholderText("12345")
        self.code_edit.setVisible(False)
        
        self.password_edit = QLineEdit()
        self.password_edit.setPlaceholderText("–ü–∞—Ä–æ–ª—å 2FA")
        self.password_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.password_edit.setVisible(False)
        
        form_layout.addRow("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", self.phone_edit)
        form_layout.addRow("–ö–æ–¥ –∏–∑ Telegram:", self.code_edit)
        form_layout.addRow("–ü–∞—Ä–æ–ª—å 2FA:", self.password_edit)
        
        layout.addLayout(form_layout)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        layout.addWidget(self.status_label)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        self.auth_btn = QPushButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        self.auth_btn.clicked.connect(self.handle_auth)
        
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)
        
        button_layout.addWidget(self.auth_btn)
        button_layout.addWidget(self.cancel_btn)
        
        layout.addLayout(button_layout)
    
    def handle_auth(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if self.auth_stage == "initial":
            self.request_code()
        elif self.auth_stage == "code_required":
            self.submit_code()
        elif self.auth_stage == "password_required":
            self.submit_password()
    
    def request_code(self):
        """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        phone = self.phone_edit.text().strip()
        if not phone:
            self.status_label.setText("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ env
        os.environ['TELEGRAM_PHONE'] = phone
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.auth_btn.setEnabled(False)
        self.status_label.setText("‚åõ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        
        self.auth_thread = AuthThread(self.user_client, phone=phone)
        self.auth_thread.finished.connect(self.on_auth_result)
        self.auth_thread.start()
    
    def submit_code(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        code = self.code_edit.text().strip()
        if not code:
            self.status_label.setText("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram")
            return
        
        self.auth_btn.setEnabled(False)
        self.status_label.setText("‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...")
        
        self.auth_thread = AuthThread(self.user_client, code=code)
        self.auth_thread.finished.connect(self.on_auth_result)
        self.auth_thread.start()
    
    def submit_password(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è 2FA"""
        password = self.password_edit.text().strip()
        if not password:
            self.status_label.setText("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA")
            return
        
        self.auth_btn.setEnabled(False)
        self.status_label.setText("‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...")
        
        self.auth_thread = AuthThread(self.user_client, password=password)
        self.auth_thread.finished.connect(self.on_auth_result)
        self.auth_thread.start()
    
    def on_auth_result(self, result):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.auth_btn.setEnabled(True)
        
        if result == "code_required":
            self.auth_stage = "code_required"
            self.phone_edit.setEnabled(False)
            self.code_edit.setVisible(True)
            self.status_label.setText("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram")
        
        elif result == "password_required":
            self.auth_stage = "password_required"
            self.code_edit.setEnabled(False)
            self.password_edit.setVisible(True)
            self.status_label.setText("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA")
        
        elif result == "authorized":
            self.status_label.setText("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            QTimer.singleShot(1000, self.accept)
        
        elif result.startswith("error:"):
            error_msg = result.replace("error:", "").strip()
            self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.auth_stage = "initial"
            self.phone_edit.setEnabled(True)
            self.code_edit.setVisible(False)
            self.code_edit.setEnabled(True)
            self.code_edit.clear()
            self.password_edit.setVisible(False)
            self.password_edit.clear()

class AuthThread(QThread):
    finished = pyqtSignal(str)
    
    def __init__(self, user_client, phone=None, code=None, password=None):
        super().__init__()
        self.user_client = user_client
        self.phone = phone
        self.code = code
        self.password = password
    
    def run(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loop –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            self.user_client.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            result = loop.run_until_complete(
                self.user_client.authorize(self.phone, self.code, self.password)
            )
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
            loop.close()
            
            self.finished.emit(result)
            
        except Exception as e:
            self.finished.emit(f"error: {str(e)}")
class TelegramStorage:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        try:
            if not self.token:
                logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
                
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {data['result']['first_name']}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {data.get('description')}")
                    return False
            else:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    def upload_file(self, file_path, metadata=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            if not self.token or not self.chat_id:
                return {'success': False, 'error': '–¢–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                
            url = f"https://api.telegram.org/bot{self.token}/sendDocument"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
            caption = self._format_caption(metadata) if metadata else "–î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∞—Ä—Ö–∏–≤–∞"
            
            with open(file_path, 'rb') as file:
                files = {'document': file}
                data = {
                    'chat_id': self.chat_id,
                    'caption': caption,
                    'parse_mode': 'HTML'
                }
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram: {file_path}")
                response = requests.post(url, files=files, data=data, timeout=60)
                result = response.json()
                
                if result.get('ok'):
                    message_id = result['result']['message_id']
                    file_id = result['result']['document']['file_id']
                    logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram, message_id: {message_id}")
                    return {
                        'message_id': message_id,
                        'file_id': file_id,
                        'success': True
                    }
                else:
                    error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    logger.error(f"–û—à–∏–±–∫–∞ Telegram: {error_msg}")
                    return {'success': False, 'error': error_msg}
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram: {e}")
            return {'success': False, 'error': str(e)}
    
    def _format_caption(self, metadata):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        caption = f"üìÑ <b>{metadata.get('filename', '–î–æ–∫—É–º–µ–Ω—Ç')}</b>\n"
        
        doc_type = metadata.get('type', '')
        if doc_type == 'incoming':
            caption += "üì• <b>–í—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç</b>\n"
        elif doc_type == 'outgoing':
            caption += "üì§ <b>–ò—Å—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç</b>\n"
        else:
            caption += "üìã –¢–∏–ø: –ù–µ —É–∫–∞–∑–∞–Ω\n"
        
        if metadata.get('doc_number'):
            caption += f"üî¢ –ù–æ–º–µ—Ä: {metadata['doc_number']}\n"
        if metadata.get('doc_date'):
            caption += f"üìÖ –î–∞—Ç–∞: {metadata['doc_date']}\n"
        if metadata.get('sender'):
            caption += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {metadata['sender']}\n"
        if metadata.get('executor'):
            caption += f"üõ†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {metadata['executor']}\n"

        return caption

class PreviewThread(QThread):
    preview_generated = pyqtSignal(str, object)
    
    def __init__(self, file_path, preview_manager):
        super().__init__()
        self.file_path = file_path
        self.preview_manager = preview_manager
    
    def run(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if not os.path.exists(self.file_path):
                self.preview_generated.emit(self.file_path, "missing")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            ext = os.path.splitext(self.file_path)[1].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            supported_formats = ['.pdf', '.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']
            if ext not in supported_formats:
                self.preview_generated.emit(self.file_path, "unsupported")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
            preview_path = self.preview_manager.create_preview(self.file_path)
            if preview_path and os.path.exists(preview_path):
                pixmap = QPixmap(preview_path)
                self.preview_generated.emit(self.file_path, pixmap)
            else:
                self.preview_generated.emit(self.file_path, "error")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            self.preview_generated.emit(self.file_path, "error")

class PreviewManager:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞ –ø—Ä–µ–≤—å—é
        self.cache_dir = os.path.join(tempfile.gettempdir(), 'document_archive_previews')
        os.makedirs(self.cache_dir, exist_ok=True)
    
    def create_preview(self, file_path, output_path=None):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        try:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            if not os.path.exists(file_path):
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            ext = os.path.splitext(file_path)[1].lower()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
            if output_path is None:
                output_path = os.path.join(self.cache_dir, f"preview_{os.path.basename(file_path)}.png")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if ext == '.pdf':
                # –î–ª—è PDF –∏—Å–ø–æ–ª—å–∑—É–µ–º PyMuPDF
                doc = fitz.open(file_path)
                page = doc.load_page(0)
                pix = page.get_pixmap(matrix=fitz.Matrix(2, 2))
                pix.save(output_path)
                doc.close()
                return output_path
                
            elif ext in ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']:
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º PIL
                img = Image.open(file_path)
                img.thumbnail((800, 600))  # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                img.save(output_path, 'PNG')
                return output_path
                
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–µ–≤—å—é –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ
                return None

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")
            return None
    
    def get_preview_pixmap(self, file_path):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç QPixmap —Å –ø—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        preview_path = self.create_preview(file_path)
        if preview_path and os.path.exists(preview_path):
            pixmap = QPixmap(preview_path)
            if not pixmap.isNull():
                return pixmap
        return None
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–µ–≤—å—é"""
        try:
            shutil.rmtree(self.cache_dir)
            os.makedirs(self.cache_dir, exist_ok=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø—Ä–µ–≤—å—é: {e}")

class OpenFileThread(QThread):
    finished = pyqtSignal()
    
    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path
    
    def run(self):
        try:
            if sys.platform == 'win32':
                os.startfile(self.file_path)
            elif sys.platform == 'darwin':
                os.system(f'open "{self.file_path}"')
            else:
                os.system(f'xdg-open "{self.file_path}"')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {e}")
        finally:
            self.finished.emit()

class SettingsDialog(QDialog):
    def __init__(self, document_manager=None):
        super().__init__(document_manager)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setFixedSize(600, 500)
        
        self.document_manager = document_manager
        self.init_ui()
        self.load_data()
    
    def init_ui(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        self.setStyleSheet("""
            QDialog {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
            }
            QLineEdit, QComboBox, QTextEdit, QListWidget, QTableWidget {
                background-color: #353535;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 3px;
                padding: 5px;
            }
            QTableWidget::item {
                background-color: #353535;
                color: #ffffff;
            }
            QTableWidget::item:selected {
                background-color: #4a6fa5;
            }
            QHeaderView::section {
                background-color: #454545;
                color: white;
                padding: 5px;
                border: none;
            }
            QTabWidget::pane {
                border: 1px solid #555555;
                background-color: #353535;
            }
            QTabBar::tab {
                background-color: #454545;
                color: #ffffff;
                padding: 8px 15px;
            }
            QTabBar::tab:selected {
                background-color: #4a6fa5;
            }
            QPushButton {
                background-color: #4a6fa5;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a7fb5;
            }
            QPushButton:pressed {
                background-color: #3a5f95;
            }
        """)
        
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        tabs = QTabWidget()
        layout.addWidget(tabs)
        
        self.sync_tab = QWidget()
        sync_layout = QVBoxLayout(self.sync_tab)

        sync_info = QLabel(
            "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ Telegram —á–∞—Ç–∞,\n"
            "–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç –∏–ª–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
            "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."
        )
        sync_info.setWordWrap(True)
        sync_info.setStyleSheet("padding: 10px; background-color: #2b5278; border-radius: 5px; color: white;")
        sync_layout.addWidget(sync_info)

        sync_btn = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
        sync_btn.clicked.connect(self.open_sync_dialog)
        sync_layout.addWidget(sync_btn)

        sync_layout.addStretch()

        tabs.addTab(self.sync_tab, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")


        # –í–∫–ª–∞–¥–∫–∞ Telegram User API
        self.user_api_tab = QWidget()
        user_api_layout = QVBoxLayout(self.user_api_tab)

        user_api_info = QLabel(
            "–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "1. –ü–æ–ª—É—á–∏—Ç–µ API ID –∏ API Hash –Ω–∞ https://my.telegram.org/apps\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "3. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ–¥ –∏–∑ Telegram\n\n"
            "‚ö†Ô∏è –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è."
        )
        user_api_info.setWordWrap(True)
        user_api_info.setStyleSheet("padding: 10px; background-color: #2b5278; border-radius: 5px; color: white;")
        user_api_layout.addWidget(user_api_info)

        user_api_form = QFormLayout()

        self.api_id_edit = QLineEdit()
        self.api_id_edit.setPlaceholderText("1234567")
        self.api_id_edit.setText(os.getenv('TELEGRAM_API_ID', ''))

        self.api_hash_edit = QLineEdit()
        self.api_hash_edit.setPlaceholderText("a1b2c3d4e5f6g7h8i9j0")
        self.api_hash_edit.setText(os.getenv('TELEGRAM_API_HASH', ''))

        self.phone_edit = QLineEdit()
        self.phone_edit.setPlaceholderText("+79123456789")
        self.phone_edit.setText(os.getenv('TELEGRAM_PHONE', ''))

        user_api_form.addRow("API ID:", self.api_id_edit)
        user_api_form.addRow("API Hash:", self.api_hash_edit)
        user_api_form.addRow("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", self.phone_edit)

        btn_layout = QHBoxLayout()
        self.test_user_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        self.test_user_btn.clicked.connect(self.test_user_connection)

        self.auth_btn = QPushButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        self.auth_btn.clicked.connect(self.open_auth_dialog)

        btn_layout.addWidget(self.test_user_btn)
        btn_layout.addWidget(self.auth_btn)

        user_api_layout.addLayout(user_api_form)
        user_api_layout.addLayout(btn_layout)
        user_api_layout.addStretch()

        tabs.addTab(self.user_api_tab, "Telegram User API")

        # –í–∫–ª–∞–¥–∫–∞ Telegram
        self.telegram_tab = QWidget()
        telegram_layout = QVBoxLayout(self.telegram_tab)
        
        telegram_info = QLabel(
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram:\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather\n"
            "2. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ chat_id —á–µ—Ä–µ–∑ @username_to_id_bot\n"
            "5. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ:\n\n"
            "‚ö†Ô∏è –í–ê–ñ–ù–û: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!"
        )
        telegram_info.setWordWrap(True)
        telegram_info.setStyleSheet("padding: 10px; background-color: #2b5278; border-radius: 5px; color: white;")
        telegram_layout.addWidget(telegram_info)
        
        telegram_form = QFormLayout()
        
        self.telegram_token_edit = QLineEdit()
        self.telegram_token_edit.setPlaceholderText("1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
        self.telegram_token_edit.setText(os.getenv('TELEGRAM_BOT_TOKEN', ''))
        
        self.telegram_chat_id_edit = QLineEdit()
        self.telegram_chat_id_edit.setPlaceholderText("-1234567890 (–¥–ª—è –≥—Ä—É–ø–ø) –∏–ª–∏ @channel_name")
        self.telegram_chat_id_edit.setText(os.getenv('TELEGRAM_CHAT_ID', ''))
        
        telegram_form.addRow("Bot Token:", self.telegram_token_edit)
        telegram_form.addRow("Chat ID:", self.telegram_chat_id_edit)
        
        btn_layout = QHBoxLayout()
        test_telegram_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        test_telegram_btn.clicked.connect(self.test_telegram_connection)
        
        btn_layout.addWidget(test_telegram_btn)
        
        telegram_layout.addLayout(telegram_form)
        telegram_layout.addLayout(btn_layout)
        telegram_layout.addStretch()
        
        # –í–∫–ª–∞–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        self.senders_tab = QWidget()
        self.senders_layout = QVBoxLayout(self.senders_tab)
        
        self.senders_table = QTableWidget()
        self.senders_table.setColumnCount(3)
        self.senders_table.setHorizontalHeaderLabels(["ID", "–ò–º—è", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        self.senders_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.senders_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.senders_table.verticalHeader().setVisible(False)
        
        add_sender_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        add_sender_btn.clicked.connect(self.add_sender)
        remove_sender_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ")
        remove_sender_btn.clicked.connect(self.remove_sender)
        
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(add_sender_btn)
        btn_layout.addWidget(remove_sender_btn)
        
        self.senders_layout.addWidget(self.senders_table)
        self.senders_layout.addLayout(btn_layout)
        
        self.executors_tab = QWidget()
        self.executors_layout = QVBoxLayout(self.executors_tab)
        
        self.executors_table = QTableWidget()
        self.executors_table.setColumnCount(3)
        self.executors_table.setHorizontalHeaderLabels(["ID", "–ò–º—è", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        self.executors_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.executors_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.executors_table.verticalHeader().setVisible(False)
        
        add_executor_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        add_executor_btn.clicked.connect(self.add_executor)
        remove_executor_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ")
        remove_executor_btn.clicked.connect(self.remove_executor)
        
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(add_executor_btn)
        btn_layout.addWidget(remove_executor_btn)
        
        self.executors_layout.addWidget(self.executors_table)
        self.executors_layout.addLayout(btn_layout)
        
        tabs.addTab(self.telegram_tab, "Telegram")
        tabs.addTab(self.senders_tab, "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏")
        tabs.addTab(self.executors_tab, "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏")
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def open_sync_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        dialog = TelegramSyncDialog(self.document_manager)
        dialog.exec()

    def test_telegram_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        token = self.telegram_token_edit.text().strip()
        chat_id = self.telegram_chat_id_edit.text().strip()
        
        if not token:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ token")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        os.environ['TELEGRAM_BOT_TOKEN'] = token
        if chat_id:
            os.environ['TELEGRAM_CHAT_ID'] = chat_id
        
        storage = TelegramStorage()
        if storage.test_connection():
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        
    def test_user_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è User API"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['TELEGRAM_API_ID'] = self.api_id_edit.text().strip()
        os.environ['TELEGRAM_API_HASH'] = self.api_hash_edit.text().strip()
        os.environ['TELEGRAM_PHONE'] = self.phone_edit.text().strip()
        
        user_client = TelegramUserClient()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —Ç–µ—Å—Ç–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            success, message = loop.run_until_complete(user_client.test_connection())
            
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"‚úÖ {message}")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"‚ùå {message}")
        finally:
            loop.run_until_complete(user_client.disconnect())
            loop.close()

    def open_auth_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        os.environ['TELEGRAM_API_ID'] = self.api_id_edit.text().strip()
        os.environ['TELEGRAM_API_HASH'] = self.api_hash_edit.text().strip()
        os.environ['TELEGRAM_PHONE'] = self.phone_edit.text().strip()
        
        user_client = TelegramUserClient()
        dialog = TelegramAuthDialog(user_client, self)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.test_user_connection()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        data = self.document_manager.load_data()
        
        self.senders_table.setRowCount(len(data["senders"]))
        for row, sender in enumerate(data["senders"]):
            self.senders_table.setItem(row, 0, QTableWidgetItem(str(sender["id"])))
            self.senders_table.setItem(row, 1, QTableWidgetItem(sender["name"]))
            self.senders_table.setItem(row, 2, QTableWidgetItem(sender.get("description", "")))
        
        self.executors_table.setRowCount(len(data["executors"]))
        for row, executor in enumerate(data["executors"]):
            self.executors_table.setItem(row, 0, QTableWidgetItem(str(executor["id"])))
            self.executors_table.setItem(row, 1, QTableWidgetItem(executor["name"]))
            self.executors_table.setItem(row, 2, QTableWidgetItem(executor.get("description", "")))
    
    def add_sender(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        dialog.setFixedSize(300, 150)
        
        layout = QFormLayout()
        dialog.setLayout(layout)
        
        name_edit = QLineEdit()
        description_edit = QLineEdit()
        
        layout.addRow("–ò–º—è:", name_edit)
        layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_edit)
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(dialog.accept)
        button_box.rejected.connect(dialog.reject)
        
        layout.addRow(button_box)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            name = name_edit.text().strip()
            if not name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            data = self.document_manager.load_data()
            if any(s["name"].lower() == name.lower() for s in data["senders"]):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            new_id = max(s["id"] for s in data["senders"]) + 1 if data["senders"] else 1
            new_sender = {
                "id": new_id,
                "name": name,
                "description": description_edit.text(),
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            data["senders"].append(new_sender)
            self.document_manager.save_data(data)
            self.load_data()
    
    def remove_sender(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        selected = self.senders_table.currentRow()
        if selected == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        sender_id = int(self.senders_table.item(selected, 0).text())
        sender_name = self.senders_table.item(selected, 1).text()
        
        reply = QMessageBox.question(
            self, 
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è "{sender_name}"?', 
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            data = self.document_manager.load_data()
            data["senders"] = [s for s in data["senders"] if s["id"] != sender_id]
            self.document_manager.save_data(data)
            self.load_data()
    
    def add_executor(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        dialog.setFixedSize(300, 150)
        
        layout = QFormLayout()
        dialog.setLayout(layout)
        
        name_edit = QLineEdit()
        description_edit = QLineEdit()
        
        layout.addRow("–ò–º—è:", name_edit)
        layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_edit)
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(dialog.accept)
        button_box.rejected.connect(dialog.reject)
        
        layout.addRow(button_box)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            name = name_edit.text().strip()
            if not name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            data = self.document_manager.load_data()
            if any(e["name"].lower() == name.lower() for e in data["executors"]):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            new_id = max(e["id"] for e in data["executors"]) + 1 if data["executors"] else 1
            new_executor = {
                "id": new_id,
                "name": name,
                "description": description_edit.text(),
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            data["executors"].append(new_executor)
            self.document_manager.save_data(data)
            self.load_data()
    
    def remove_executor(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        selected = self.executors_table.currentRow()
        if selected == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        executor_id = int(self.executors_table.item(selected, 0).text())
        executor_name = self.executors_table.item(selected, 1).text()
        
        reply = QMessageBox.question(
            self, 
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è "{executor_name}"?', 
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            data = self.document_manager.load_data()
            data["executors"] = [e for e in data["executors"] if e["id"] != executor_id]
            self.document_manager.save_data(data)
            self.load_data()

    def accept(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Bot –≤ .env —Ñ–∞–π–ª
        token = self.telegram_token_edit.text().strip()
        chat_id = self.telegram_chat_id_edit.text().strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ User API
        api_id = self.api_id_edit.text().strip()
        api_hash = self.api_hash_edit.text().strip()
        phone = self.phone_edit.text().strip()
        
        env_file_path = '.env'
        env_data = {}
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if os.path.exists(env_file_path):
            with open(env_file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        env_data[key] = value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_to_update = {
            'TELEGRAM_BOT_TOKEN': token,
            'TELEGRAM_CHAT_ID': chat_id,
            'TELEGRAM_API_ID': api_id,
            'TELEGRAM_API_HASH': api_hash,
            'TELEGRAM_PHONE': phone
        }
        
        for key, value in settings_to_update.items():
            if value:
                env_data[key] = value
            elif key in env_data:
                del env_data[key]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            with open(env_file_path, 'w', encoding='utf-8') as f:
                for key, value in env_data.items():
                    f.write(f'{key}={value}\n')
            
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {env_file_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        for key, value in settings_to_update.items():
            if value:
                os.environ[key] = value
            elif key in os.environ:
                del os.environ[key]
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv(override=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
        self.document_manager.update_telegram_status()
        
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        super().accept()

class DocumentUploadDialog(QDialog):
    def __init__(self, doc_type, document_manager=None):
        super().__init__(document_manager)
        self.setWindowTitle(f"–î–µ—Ç–∞–ª–∏ {'–≤—Ö–æ–¥—è—â–µ–≥–æ' if doc_type == 'incoming' else '–∏—Å—Ö–æ–¥—è—â–µ–≥–æ'} –ø–∏—Å—å–º–∞")
        self.setFixedSize(300, 200)
        self.setStyleSheet("""
            QDialog {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
            }
            QLineEdit {
                background-color: #353535;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 3px;
                padding: 5px;
            }
            QPushButton {
                background-color: #4a6fa5;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a7fb5;
            }
            QPushButton:pressed {
                background-color: #3a5f95;
            }
        """)
        layout = QFormLayout()
        self.setLayout(layout)
        
        self.doc_number = QLineEdit()
        self.doc_date = QLineEdit()
        self.doc_date.setPlaceholderText("–î–î.–ú–ú.–ì–ì–ì–ì")
        
        layout.addRow("–ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞:", self.doc_number)
        layout.addRow("–î–∞—Ç–∞ –ø–∏—Å—å–º–∞:", self.doc_date)
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        
        layout.addRow(button_box)
    
    def get_data(self):
        return {
            "doc_number": self.doc_number.text().strip(),
            "doc_date": self.doc_date.text().strip()
        }

class DocumentManager(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ê—Ä—Ö–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        self.setGeometry(100, 100, 1000, 600)
        
        self.telegram_user_client = TelegramUserClient()

        if getattr(sys, 'frozen', False):
            # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã–π EXE
            application_path = os.path.dirname(sys.executable)
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç Python
            application_path = os.path.dirname(os.path.abspath(__file__))
        
        self.base_dir = os.path.join(application_path, "–î–æ–∫—É–º–µ–Ω—Ç—ã –∞—Ä—Ö–∏–≤–∞")
        self.incoming_dir = os.path.join(self.base_dir, "–í—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        self.executors_dir = os.path.join(self.base_dir, "–ò—Å—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        
        os.makedirs(self.incoming_dir, exist_ok=True)
        os.makedirs(self.executors_dir, exist_ok=True)
        
        self.data_file = os.path.join(self.base_dir, "data.json")
        self.init_data()

        self.preview_manager = PreviewManager()
        self.preview_thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Storage
        self.telegram_storage = TelegramStorage()
        
        self.init_ui()
        self.migrate_data()
        self.load_documents()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen = QApplication.primaryScreen()
        screen_geometry = screen.availableGeometry()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–ø—Ä–∏–º–µ—Ä–Ω–æ 80% –æ—Ç —ç–∫—Ä–∞–Ω–∞)
        min_width = int(screen_geometry.width() * 0.99)
        min_height = int(screen_geometry.height() * 0.99)
        self.setMinimumSize(min_width, min_height)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (90% –æ—Ç —ç–∫—Ä–∞–Ω–∞)
        initial_width = int(screen_geometry.width() * 0.99)
        initial_height = int(screen_geometry.height() * 0.99)
        self.resize(initial_width, initial_height)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.move(
            (screen_geometry.width() - initial_width) // 2,
            (screen_geometry.height() - initial_height) // 2
        )
        
        self.show()

    def init_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        if not os.path.exists(self.data_file):
            data = {
                "documents": [],
                "senders": [],
                "executors": [],
                "current_user": None
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        with open(self.data_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def save_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    
    def update_preview(self, file_path):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            if self.preview_thread and self.preview_thread.isRunning():
                self.preview_thread.quit()
                self.preview_thread.wait()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
            self.preview_thread = PreviewThread(file_path, self.preview_manager)
            self.preview_thread.preview_generated.connect(self.on_preview_generated)
            self.preview_thread.start()
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
            self.preview_widget.clear()
            self.preview_widget.setText("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é...")
            self.preview_widget.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    background-color: rgba(255, 255, 255, 0.1);
                    border: 1px solid #4a6fa5;
                    border-radius: 5px;
                }
            """)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –ø—Ä–µ–≤—å—é: {e}")
            self.clear_preview()

    def on_preview_generated(self, file_path, result):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–≤—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
        current_item = self.documents_list.currentItem()
        if current_item and current_item.data(Qt.ItemDataRole.UserRole)["path"] == file_path:
            if isinstance(result, QPixmap) and not result.isNull():
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –≤–∏–¥–∂–µ—Ç–∞
                scaled_pixmap = result.scaled(
                    self.preview_widget.width() - 20, 
                    self.preview_widget.height() - 20,
                    Qt.AspectRatioMode.KeepAspectRatio,
                    Qt.TransformationMode.SmoothTransformation
                )
                self.preview_widget.setPixmap(scaled_pixmap)
                # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.preview_widget.setStyleSheet("""
                    QLabel {
                        background-color: rgba(255, 255, 255, 0.1);
                        border: 1px solid #4a6fa5;
                        border-radius: 5px;
                    }
                """)
            else:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                self.preview_widget.clear()
                self.preview_widget.setText("üìÑ")
                self.preview_widget.setStyleSheet("""
                    QLabel {
                        font-size: 100px;
                        background-color: rgba(255, 255, 255, 0.1);
                        border: 1px solid #4a6fa5;
                        border-radius: 5px;
                    }
                """)

    def clear_preview(self):
        """–û—á–∏—â–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –ø—Ä–µ–≤—å—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–º–∞–π–ª–∏–∫"""
        self.preview_widget.clear()
        self.preview_widget.setText("üìÑ")
        self.preview_widget.setStyleSheet("""
            QLabel {
                font-size: 100px;
                background-color: rgba(255, 255, 255, 0.1);
                border: 1px solid #4a6fa5;
                border-radius: 5px;
            }
        """)    

    def upload_to_telegram(self, file_path, doc_type, doc_data):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            if not self.telegram_storage.test_connection():
                return False
            
            metadata = {
                'filename': doc_data['filename'],
                'type': doc_type,
                'doc_number': doc_data.get('doc_number', ''),
                'doc_date': doc_data.get('doc_date', ''),
                'sender': doc_data.get('sender', ''),
                'executor': doc_data.get('executor', '')
            }
            
            result = self.telegram_storage.upload_file(file_path, metadata)
            
            if result['success']:
                doc_data['telegram_file_id'] = result['file_id']
                doc_data['telegram_message_id'] = result['message_id']
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram (message_id: {result['message_id']})")
                return True
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Telegram: {result.get('error')}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Telegram: {e}")
            return False

    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        left_panel = QWidget()
        left_panel.setFixedWidth(200)
        left_layout = QVBoxLayout(left_panel)
        left_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        # –õ–æ–≥–æ—Ç–∏–ø
        logo_label = QLabel()
        logo_pixmap = QPixmap("name.png")

        if not logo_pixmap.isNull():
            logo_pixmap = logo_pixmap.scaled(200, 200, Qt.AspectRatioMode.KeepAspectRatio, 
                                        Qt.TransformationMode.SmoothTransformation)
            logo_label.setPixmap(logo_pixmap)
            logo_label.setAlignment(Qt.AlignmentFlag.AlignBottom | Qt.AlignmentFlag.AlignCenter)
            logo_label.setStyleSheet("background: transparent;")
            left_layout.addWidget(logo_label)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–ê—Ä—Ö–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: white;
                padding: 10px;
                background-color: rgba(0, 0, 0, 0.2);
                border-radius: 5px;
            }
        """)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        left_layout.addWidget(title_label)
        
        # –°—Ç–∞—Ç—É—Å Telegram
        self.telegram_status_label = QLabel()
        self.telegram_status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.telegram_status_label.setMinimumHeight(50)
        self.telegram_status_label.setStyleSheet("""
            QLabel {
                background-color: #c42b1c;
                color: white;
                font-size: 12px;
                padding: 8px;
                border-radius: 5px;
                margin: 5px;
                font-weight: bold;
            }
        """)
        self.telegram_status_label.setText("‚ùå Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        left_layout.addWidget(self.telegram_status_label)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_telegram_status()

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons = [
            ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ Telegram", self.upload_document_to_telegram),
            ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ", self.upload_document_local),
            ("–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", self.delete_document)
        ]
        
        for text, handler in buttons:
            btn = QPushButton(text)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #4a6fa5;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                    margin-top: 10px;
                }
                QPushButton:hover {
                    background-color: #5a7fb5;
                }
                QPushButton:pressed {
                    background-color: #3a5f95;
                }
            """)
            btn.setFixedHeight(40)
            btn.clicked.connect(handler)
            left_layout.addWidget(btn)

        left_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_btn = QPushButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_btn.setStyleSheet("""
            QPushButton {
                background-color: #5a5a5a;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
                margin-top: 10px;
            }
            QPushButton:hover {
                background-color: #6a6a6a;
            }
            QPushButton:pressed {
                background-color: #4a4a4a;
            }
        """)
        settings_btn.setFixedHeight(40)
        settings_btn.clicked.connect(self.open_settings)
        left_layout.addWidget(settings_btn)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        center_panel = QWidget()
        center_layout = QVBoxLayout(center_panel)
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_panel = QWidget()
        filter_layout = QHBoxLayout(filter_panel)
        
        self.filter_combo = QComboBox()
        self.filter_combo.addItems(["–í—Å–µ", "–í—Ö–æ–¥—è—â–∏–µ", "–ò—Å—Ö–æ–¥—è—â–∏–µ"])
        self.filter_combo.currentTextChanged.connect(self.apply_filters)
        
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("–ü–æ–∏—Å–∫...")
        self.search_edit.textChanged.connect(self.apply_filters)
        
        filter_layout.addWidget(self.filter_combo)
        filter_layout.addWidget(self.search_edit)
        
        center_layout.addWidget(filter_panel)
        
        # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: 2px solid #4a6fa5;
                border-radius: 5px;
                background-color: rgba(255, 255, 255, 0.1);
            }
            QScrollBar:vertical {
                width: 15px;
                background: rgba(255, 255, 255, 0.1);
            }
            QScrollBar::handle:vertical {
                background: #4a6fa5;
                min-height: 20px;
                border-radius: 5px;
            }
        """)
        
        self.documents_list = QListWidget()
        self.documents_list.setStyleSheet("""
            QListWidget {
                background-color: rgba(255, 255, 255, 0.05);
                color: white;
                font-size: 14px;
                border: none;
            }
            QListWidget::item {
                padding: 10px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }
            QListWidget::item:hover {
                background-color: rgba(255, 255, 255, 0.1);
            }
            QListWidget::item:selected {
                background-color: #4a6fa5;
            }
        """)
        self.documents_list.itemDoubleClicked.connect(self.open_document_threaded)
        self.documents_list.itemClicked.connect(self.show_document_info)
        scroll_area.setWidget(self.documents_list)
        
        center_layout.addWidget(scroll_area)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–µ–≤—å—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        right_panel = QWidget()
        right_panel.setFixedWidth(350)
        right_layout = QVBoxLayout(right_panel)
        
        # –ü—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.preview_widget = QLabel()
        self.preview_widget.setFixedSize(300, 300)
        self.preview_widget.setStyleSheet("""
            QLabel {
                background-color: rgba(255, 255, 255, 0.1);
                border: 1px solid #4a6fa5;
                border-radius: 5px;
            }
        """)
        self.preview_widget.setAlignment(Qt.AlignmentFlag.AlignCenter)
        right_layout.addWidget(self.preview_widget)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        info_title = QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        info_title.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: white;
                padding: 10px;
                background-color: rgba(0, 0, 0, 0.2);
                border-radius: 5px;
            }
        """)
        info_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        right_layout.addWidget(info_title)
        
        # –û–±–ª–∞—Å—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.info_widget = QWidget()
        self.info_layout = QFormLayout(self.info_widget)
        self.info_layout.setVerticalSpacing(8)
        self.info_layout.setContentsMargins(15, 10, 10, 10)
        
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ", "name_label"),
            ("–¢–∏–ø", "type_label"),
            ("–ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞", "doc_number_label"),
            ("–î–∞—Ç–∞ –ø–∏—Å—å–º–∞", "doc_date_label"),
            ("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "sender_label"),
            ("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "executor_label"),
            ("–†–∞–∑–º–µ—Ä", "size_label"),
            ("–ü—É—Ç—å", "path_label"),
            ("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "date_label"),
            ("Telegram ID", "telegram_id_label")
        ]
        
        for field_name, field_var in fields:
            label = QLabel(field_name + ":")
            label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    color: white;
                    font-weight: bold;
                }
            """)
            
            value_label = QLabel("-")
            value_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    color: white;
                    margin: 2px;
                    padding: 2px;
                }
            """)
            value_label.setWordWrap(True)
            value_label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
            value_label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.MinimumExpanding)
            
            setattr(self, field_var, value_label)
            self.info_layout.addRow(label, value_label)
        
        right_layout.addWidget(self.info_widget)
        right_layout.addStretch()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addWidget(left_panel)
        main_layout.addWidget(center_panel)
        main_layout.addWidget(right_panel)
        
        # –°—Ç–∏–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                        stop:0 #614385, stop:1 #516395);
            }
            QLineEdit, QComboBox {
                background-color: rgba(255, 255, 255, 0.1);
                color: white;
                border: 1px solid #4a6fa5;
                border-radius: 3px;
                padding: 5px;
            }
            QComboBox QAbstractItemView {
                background-color: #516395;
                color: white;
                selection-background-color: #4a6fa5;
            }
        """)
    
    def update_telegram_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        if self.telegram_storage.test_connection():
            self.telegram_status_label.setText("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.telegram_status_label.setStyleSheet("""
                QLabel {
                    background-color: #2d7d46;
                    color: white;
                    font-size: 12px;
                    padding: 8px;
                    border-radius: 5px;
                    margin: 5px;
                    font-weight: bold;
                }
            """)
        else:
            self.telegram_status_label.setText("‚ùå Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            self.telegram_status_label.setStyleSheet("""
                QLabel {
                    background-color: #c42b1c;
                    color: white;
                    font-size: 12px;
                    padding: 8px;
                    border-radius: 5px;
                    margin: 5px;
                    font-weight: bold;
                }
            """)
    
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        dialog = SettingsDialog(self)
        dialog.exec()
        self.update_telegram_status()
        self.load_documents()
    
    def apply_filters(self):
        """–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        search_text = self.search_edit.text().lower()
        filter_type = self.filter_combo.currentText()
        
        for i in range(self.documents_list.count()):
            item = self.documents_list.item(i)
            doc = item.data(Qt.ItemDataRole.UserRole)
            visible = True
            
            # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if search_text:
                search_fields = [
                    doc["filename"].lower(),
                    doc.get("sender", "").lower(),
                    doc.get("executor", "").lower(),
                    doc.get("doc_number", "").lower(),
                    doc.get("doc_date", "").lower(),
                    doc.get("description", "").lower()
                ]
                if not any(search_text in field for field in search_fields):
                    visible = False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
            if visible and filter_type != "–í—Å–µ":
                if filter_type == "–í—Ö–æ–¥—è—â–∏–µ" and doc["type"] != "incoming":
                    visible = False
                elif filter_type == "–ò—Å—Ö–æ–¥—è—â–∏–µ" and doc["type"] != "outgoing":
                    visible = False
            
            item.setHidden(not visible)

    def load_documents(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        data = self.load_data()
        self.documents_list.clear()
        
        for doc in data["documents"]:
            item = QListWidgetItem(doc["filename"])
            item.setData(Qt.ItemDataRole.UserRole, doc)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ –Ω–∞–ª–∏—á–∏—è –≤ Telegram
            if doc.get('telegram_file_id'):
                item.setIcon(QIcon.fromTheme("cloud-upload"))
                item.setForeground(Qt.GlobalColor.green)
            else:
                item.setForeground(Qt.GlobalColor.white)
            
            if doc['filename'].lower().endswith('.pdf'):
                item.setIcon(QIcon.fromTheme("application-pdf"))
            elif doc['filename'].lower().endswith(('.png', '.jpg', '.jpeg')):
                item.setIcon(QIcon.fromTheme("image-x-generic"))
            else:
                item.setIcon(QIcon.fromTheme("text-x-generic"))
            
            self.documents_list.addItem(item)

    def upload_document_to_telegram(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram"""
        self._upload_document(upload_to_telegram=True)
    
    def upload_document_local(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ"""
        self._upload_document(upload_to_telegram=False)

    def _upload_document(self, upload_to_telegram=True):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        type_dialog = QDialog(self)
        type_dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        type_dialog.setFixedSize(300, 150)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        type_dialog.setStyleSheet("""
            QDialog {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
                padding: 10px;
            }
            QPushButton {
                background-color: #4a6fa5;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
                margin: 5px;
            }
            QPushButton:hover {
                background-color: #5a7fb5;
            }
            QPushButton:pressed {
                background-color: #3a5f95;
            }
        """)
        
        layout = QVBoxLayout()
        type_dialog.setLayout(layout)
        
        label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
        incoming_btn = QPushButton("–í—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ")
        outgoing_btn = QPushButton("–ò—Å—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ")
        
        incoming_btn.clicked.connect(lambda: self.process_document_upload("incoming", type_dialog, upload_to_telegram))
        outgoing_btn.clicked.connect(lambda: self.process_document_upload("outgoing", type_dialog, upload_to_telegram))
        
        layout.addWidget(label)
        layout.addWidget(incoming_btn)
        layout.addWidget(outgoing_btn)
        
        type_dialog.exec()

    def process_document_upload(self, doc_type, type_dialog, upload_to_telegram):
        """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        type_dialog.close()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Telegram
        if upload_to_telegram and not self.telegram_storage.test_connection():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", 
                            "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram\n\n"
                            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
            return
        
        # 1. –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
            "",
            "–î–æ–∫—É–º–µ–Ω—Ç—ã (*.pdf *.doc *.docx *.txt);;–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        
        if not file_path:
            return
        
        # 2. –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
        upload_dialog = DocumentUploadDialog(doc_type, self)
        if upload_dialog.exec() != QDialog.DialogCode.Accepted:
            return
        
        doc_details = upload_dialog.get_data()
        if not doc_details["doc_number"]:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            return
        
        filename = os.path.basename(file_path)
        data = self.load_data()
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        for doc in data['documents']:
            if (doc['filename'].lower() == filename.lower() and 
                doc['type'] == doc_type and 
                doc.get('doc_number') == doc_details['doc_number']):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, —Ç–∏–ø–æ–º –∏ –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
        
        # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_data = {
            'filename': filename,
            'type': doc_type,
            'doc_number': doc_details['doc_number'],
            'doc_date': doc_details['doc_date'],
            'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'size': int(os.path.getsize(file_path))
        }

        try:
            # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            local_path = None
            
            if doc_type == "incoming":
                # –í—ã–±–æ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                sender = self.select_or_create_entity("sender", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", "–ù–æ–≤—ã–π")
                if not sender:
                    return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
                
                doc_data['sender'] = sender
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                data = self.load_data()
                sender_obj = next((s for s in data["senders"] if s["name"] == sender), None)
                if sender_obj:
                    doc_data['sender_id'] = sender_obj["id"]
                else:
                    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–∫—Ä–∞–π–Ω–µ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
                    doc_data['sender_id'] = max(s["id"] for s in data["senders"]) + 1 if data["senders"] else 1
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
                sender_dir = os.path.join(self.incoming_dir, sender)
                os.makedirs(sender_dir, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                local_path = os.path.join(sender_dir, filename)
                shutil.copy2(file_path, local_path)
                
            elif doc_type == "outgoing":
                # –í—ã–±–æ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                executor = self.select_or_create_entity("executor", "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "–ù–æ–≤—ã–π")
                if not executor:
                    return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
                
                doc_data['executor'] = executor
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                data = self.load_data()
                executor_obj = next((e for e in data["executors"] if e["name"] == executor), None)
                if executor_obj:
                    doc_data['executor_id'] = executor_obj["id"]
                else:
                    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–∫—Ä–∞–π–Ω–µ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
                    doc_data['executor_id'] = max(e["id"] for e in data["executors"]) + 1 if data["executors"] else 1
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
                executor_dir = os.path.join(self.executors_dir, executor)
                os.makedirs(executor_dir, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                local_path = os.path.join(executor_dir, filename)
                shutil.copy2(file_path, local_path)
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω
            if not local_path or not os.path.exists(local_path):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            doc_data['path'] = local_path
            
            # 7. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Telegram –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            telegram_success = False
            if upload_to_telegram:
                telegram_success = self.upload_to_telegram(local_path, doc_type, doc_data)
                if telegram_success:
                    logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram: {filename}")
                else:
                    logger.warning(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram: {filename}")
            
            # 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            data = self.load_data()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
            data['documents'].append(doc_data)
            self.save_data(data)
            
            # 9. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.load_documents()
            
            # 10. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            size_kb = doc_data['size'] / 1024
            message = (f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:\n"
                    f"üìÑ –§–∞–π–ª: {filename}\n"
                    f"üî¢ –ù–æ–º–µ—Ä: {doc_details['doc_number']}\n"
                    f"üìÖ –î–∞—Ç–∞: {doc_details['doc_date']}\n"
                    f"üíæ –†–∞–∑–º–µ—Ä: {size_kb:.1f} KB")
            
            if upload_to_telegram:
                if telegram_success:
                    message += "\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram"
                else:
                    message += "\n‚ö†Ô∏è –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)"
            else:
                message += "\nüìÅ –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è"
            
            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", message)
            
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if local_path and os.path.exists(local_path):
                try:
                    os.remove(local_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {local_path}")
                except Exception as cleanup_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {cleanup_error}")
            
            error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç:\n{str(e)}"
            logger.error(error_message)
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                error_message
            )
        
    def select_or_create_entity(self, entity_type, select_title, create_title):
        """–í—ã–±–æ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        data = self.load_data()
        entities = data[f"{entity_type}s"]
        
        dialog = QDialog(self)
        dialog.setWindowTitle(select_title)
        dialog.setFixedSize(300, 200)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        dialog.setStyleSheet("""
            QDialog {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QListWidget {
                background-color: #353535;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 3px;
            }
            QPushButton {
                background-color: #4a6fa5;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-weight: bold;
                margin: 2px;
            }
            QPushButton:hover {
                background-color: #5a7fb5;
            }
            QPushButton:pressed {
                background-color: #3a5f95;
            }
        """)
        
        layout = QVBoxLayout()
        dialog.setLayout(layout)
        
        entity_list = QListWidget()
        for entity in entities:
            entity_list.addItem(entity["name"])
        
        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        select_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å")
        create_btn = QPushButton(create_title)
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        selected_entity = [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ —Å—Å—ã–ª–∫–µ
        
        def on_select():
            if entity_list.currentItem():
                selected_entity[0] = entity_list.currentItem().text()
                dialog.accept()
            else:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
        
        def on_create():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            new_entity = self.create_new_entity_direct(entity_type, dialog)
            if new_entity:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                entity_list.clear()
                updated_data = self.load_data()
                for entity in updated_data[f"{entity_type}s"]:
                    entity_list.addItem(entity["name"])
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
                for i in range(entity_list.count()):
                    if entity_list.item(i).text() == new_entity:
                        entity_list.setCurrentRow(i)
                        break
        
        def on_cancel():
            selected_entity[0] = None
            dialog.reject()
        
        select_btn.clicked.connect(on_select)
        create_btn.clicked.connect(on_create)
        cancel_btn.clicked.connect(on_cancel)
        
        btn_layout.addWidget(select_btn)
        btn_layout.addWidget(create_btn)
        btn_layout.addWidget(cancel_btn)
        
        layout.addWidget(entity_list)
        layout.addLayout(btn_layout)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            return selected_entity[0]
        
        return None
    
    def create_new_entity_direct(self, entity_type, parent_dialog=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –±–µ–∑ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞"""
        dialog = QDialog(parent_dialog or self)
        dialog.setWindowTitle(f"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ {entity_type}")
        dialog.setFixedSize(300, 150)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        dialog.setStyleSheet("""
            QDialog {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
            }
            QLineEdit {
                background-color: #353535;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 3px;
                padding: 5px;
            }
            QPushButton {
                background-color: #4a6fa5;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a7fb5;
            }
            QPushButton:pressed {
                background-color: #3a5f95;
            }
        """)
        
        layout = QFormLayout()
        dialog.setLayout(layout)
        
        name_edit = QLineEdit()
        description_edit = QLineEdit()
        
        name_label = QLabel("–ò–º—è:")
        name_label.setStyleSheet("color: #ffffff;")
        desc_label = QLabel("–û–ø–∏—Å–∞–Ω–∏–µ:")
        desc_label.setStyleSheet("color: #ffffff;")
        
        layout.addRow(name_label, name_edit)
        layout.addRow(desc_label, description_edit)
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(dialog.accept)
        button_box.rejected.connect(dialog.reject)
        
        layout.addRow(button_box)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            name = name_edit.text().strip()
            if not name:
                QMessageBox.warning(parent_dialog or self, "–û—à–∏–±–∫–∞", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return None
            
            data = self.load_data()
            entities = data[f"{entity_type}s"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            if any(e["name"].lower() == name.lower() for e in entities):
                QMessageBox.warning(parent_dialog or self, "–û—à–∏–±–∫–∞", f"{entity_type} —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return None
            
            new_id = max(e["id"] for e in entities) + 1 if entities else 1
            new_entity = {
                "id": new_id,
                "name": name,
                "description": description_edit.text(),
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            entities.append(new_entity)
            self.save_data(data)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏
            if entity_type == "executor":
                executor_dir = os.path.join(self.executors_dir, name)
                os.makedirs(executor_dir, exist_ok=True)
            
            elif entity_type == "sender":
                sender_dir = os.path.join(self.incoming_dir, name)
                os.makedirs(sender_dir, exist_ok=True)
            
            return name
        
        return None
    
    def delete_document(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not (selected_item := self.documents_list.currentItem()):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        doc = selected_item.data(Qt.ItemDataRole.UserRole)
        filename = doc["filename"]
        
        reply = QMessageBox.question(
            self, 
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}?\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ.', 
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply != QMessageBox.StandardButton.Yes:
            return
        
        try:
            if os.path.exists(doc.get("path", "")):
                os.remove(doc["path"])
            
            data = self.load_data()
            data["documents"] = [
                d for d in data["documents"] 
                if not (d["filename"] == filename and 
                    d.get("type") == doc.get("type") and 
                    d.get("doc_number") == doc.get("doc_number"))
            ]
            self.save_data(data)
            
            self.load_documents()
            self.clear_document_info()
            
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def open_document_threaded(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        selected_item = self.documents_list.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
            return
        
        doc = selected_item.data(Qt.ItemDataRole.UserRole)
        file_path = doc["path"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª {doc['filename']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        self.open_thread = OpenFileThread(file_path)
        self.open_thread.start()

    def show_document_info(self, item):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏ –µ–≥–æ –ø—Ä–µ–≤—å—é"""
        if not item:
            return
            
        doc = item.data(Qt.ItemDataRole.UserRole)
        if not doc:
            return
        
        try:
            filename = doc.get("filename", "-")
            path = doc.get("path", "-")
            doc_type = doc.get("type", "")
            doc_number = doc.get("doc_number", "-")
            doc_date = doc.get("doc_date", "-")
            sender = doc.get("sender", "-")
            executor = doc.get("executor", "-")
            date_added = doc.get("date", "-")
            telegram_id = doc.get("telegram_file_id", "-")
            
            try:
                size_bytes = int(doc.get("size", 0))
                if size_bytes >= 1024 * 1024:  # –ë–æ–ª—å—à–µ 1 MB
                    size_text = f"{size_bytes/(1024*1024):.2f} MB"
                elif size_bytes >= 1024:  # –ë–æ–ª—å—à–µ 1 KB
                    size_text = f"{size_bytes/1024:.2f} KB"
                else:
                    size_text = f"{size_bytes} B"
            except (ValueError, TypeError):
                size_text = "0 B"

            self.name_label.setText(filename)
            self.path_label.setText(path)
            self.type_label.setText("–í—Ö–æ–¥—è—â–∏–π" if doc_type == "incoming" else "–ò—Å—Ö–æ–¥—è—â–∏–π")
            self.doc_number_label.setText(doc_number)
            self.doc_date_label.setText(doc_date)
            self.sender_label.setText(sender)
            self.executor_label.setText(executor)
            self.size_label.setText(size_text)
            self.date_label.setText(date_added)
            self.telegram_id_label.setText(telegram_id if telegram_id != "-" else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            self.update_preview(path)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            for label in [self.name_label, self.path_label, self.type_label,
                        self.doc_number_label, self.doc_date_label,
                        self.sender_label, self.executor_label,
                        self.size_label, self.date_label, self.telegram_id_label]:
                label.setText("-")
            self.clear_preview()

    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        super().resizeEvent(event)
        if hasattr(self, 'documents_list') and self.documents_list.currentItem():
            current_item = self.documents_list.currentItem()
            if current_item:
                doc = current_item.data(Qt.ItemDataRole.UserRole)
                if doc and "path" in doc:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–≤—å—é
                    pixmap = self.preview_widget.pixmap()
                    if pixmap and not pixmap.isNull():
                        scaled_pixmap = pixmap.scaled(
                            self.preview_widget.width() - 20, 
                            self.preview_widget.height() - 20,
                            Qt.AspectRatioMode.KeepAspectRatio,
                            Qt.TransformationMode.SmoothTransformation
                        )
                        self.preview_widget.setPixmap(scaled_pixmap)

    def clear_document_info(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        self.name_label.setText("-")
        self.type_label.setText("-")
        self.sender_label.setText("-")
        self.executor_label.setText("-")
        self.size_label.setText("-")
        self.path_label.setText("-")
        self.date_label.setText("-")
        self.doc_number_label.setText("-")
        self.doc_date_label.setText("-")
        self.telegram_id_label.setText("-")
        self.clear_preview()
    
    def migrate_data(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        data = self.load_data()
        changed = False
        
        for doc in data["documents"]:
            if isinstance(doc.get("size"), str):
                try:
                    doc["size"] = int(doc["size"])
                    changed = True
                except (ValueError, TypeError):
                    doc["size"] = 0
                    changed = True
        if changed:
            self.save_data(data)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º event loop –¥–ª—è asyncio
    loop = qasync.QEventLoop(app)
    asyncio.set_event_loop(loop)
    
    window = DocumentManager()
    window.show()
    
    with loop:
        sys.exit(loop.run_forever())