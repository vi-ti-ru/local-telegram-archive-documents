# TODO : 
import os
import sys
import json
import fitz
import shutil
from PIL import Image
from datetime import datetime
from dotenv import load_dotenv
import webbrowser
import tempfile
import io
import requests
import urllib.parse
# –≤–µ—Å—å –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Å–ª–æ–∂–Ω–æ –Ω–æ –º–æ–∂–Ω–æ
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QSize
from PyQt6.QtGui import QPixmap, QIcon, QFontMetrics
from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QWidget, QListWidget, 
                            QPushButton, QFileDialog, QMessageBox, QLabel, QHBoxLayout,
                            QScrollArea, QListWidgetItem, QSizePolicy, QComboBox, 
                            QLineEdit, QDialog, QFormLayout, QDialogButtonBox, QTabWidget,
                            QTableWidget, QTableWidgetItem, QHeaderView)
load_dotenv()

class TelegramStorage:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.test_connection()
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        try:
            if not self.token:
                print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
                
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {data['result']['first_name']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {data.get('description')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    def upload_file(self, file_path, metadata=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram –∫–∞–Ω–∞–ª —Å inline-–∫–Ω–æ–ø–∫–æ–π"""
        try:
            if not self.token or not self.chat_id:
                return {'success': False, 'error': '–¢–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                
            url = f"https://api.telegram.org/bot{self.token}/sendDocument"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
            caption = self._format_caption(metadata) if metadata else "–î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∞—Ä—Ö–∏–≤–∞"

            
            with open(file_path, 'rb') as file:
                files = {'document': file}
                data = {
                    'chat_id': self.chat_id,
                    'caption': caption,
                    'parse_mode': 'HTML',
                }
                
                response = requests.post(url, files=files, data=data, timeout=60)
                result = response.json()
                
                if result.get('ok'):
                    message_id = result['result']['message_id']
                    file_id = result['result']['document']['file_id']
                    return {
                        'message_id': message_id,
                        'file_id': file_id,
                        'success': True
                    }
                else:
                    error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {error_msg}")
                    return {'success': False, 'error': error_msg}
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram: {e}")
            return {'success': False, 'error': str(e)}
    
    def _format_caption(self, metadata):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        caption = f"üìÑ <b>{metadata.get('filename', '–î–æ–∫—É–º–µ–Ω—Ç')}</b>\n"
        
        doc_type = metadata.get('type', '')
        if doc_type == 'incoming':
            caption += "üì• <b>–í—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç</b>\n"
        elif doc_type == 'outgoing':
            caption += "üì§ <b>–ò—Å—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç</b>\n"
        else:
            caption += "üìã –¢–∏–ø: –ù–µ —É–∫–∞–∑–∞–Ω\n"
        
        if metadata.get('doc_number'):
            caption += f"üî¢ –ù–æ–º–µ—Ä: {metadata['doc_number']}\n"
        if metadata.get('doc_date'):
            caption += f"üìÖ –î–∞—Ç–∞: {metadata['doc_date']}\n"
        if metadata.get('sender'):
            caption += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {metadata['sender']}\n"
        if metadata.get('executor'):
            caption += f"üõ†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {metadata['executor']}\n"
            
        return caption
    
    def get_channel_files(self, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/getUpdates"
            response = requests.get(url)
            updates = response.json()
            
            files = []
            if updates.get('ok') and updates['result']:
                for update in updates['result']:
                    if 'message' in update and 'document' in update['message']:
                        doc = update['message']['document']
                        files.append({
                            'file_id': doc['file_id'],
                            'file_name': doc.get('file_name', 'unknown'),
                            'caption': update['message'].get('caption', ''),
                            'date': update['message']['date'],
                            'message_id': update['message']['message_id']
                        })
            return files
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            return []

class PreviewThread(QThread):
    preview_generated = pyqtSignal(str, object)
    
    def __init__(self, file_path, preview_manager):
        super().__init__()
        self.file_path = file_path
        self.preview_manager = preview_manager
    
    def run(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if not os.path.exists(self.file_path):
                self.preview_generated.emit(self.file_path, "missing")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            ext = os.path.splitext(self.file_path)[1].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            supported_formats = ['.pdf', '.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']
            if ext not in supported_formats:
                self.preview_generated.emit(self.file_path, "unsupported")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
            preview_path = self.preview_manager.create_preview(self.file_path)
            if preview_path and os.path.exists(preview_path):
                pixmap = QPixmap(preview_path)
                self.preview_generated.emit(self.file_path, pixmap)
            else:
                self.preview_generated.emit(self.file_path, "error")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            self.preview_generated.emit(self.file_path, "error")


class PreviewManager:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞ –ø—Ä–µ–≤—å—é
        self.cache_dir = os.path.join(tempfile.gettempdir(), 'document_archive_previews')
        os.makedirs(self.cache_dir, exist_ok=True)
    
    def create_preview(self, file_path, output_path=None):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        try:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            if not os.path.exists(file_path):
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            ext = os.path.splitext(file_path)[1].lower()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
            if output_path is None:
                output_path = os.path.join(self.cache_dir, f"preview_{os.path.basename(file_path)}.png")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if ext == '.pdf':
                # –î–ª—è PDF –∏—Å–ø–æ–ª—å–∑—É–µ–º PyMuPDF
                doc = fitz.open(file_path)
                page = doc.load_page(0)
                pix = page.get_pixmap(matrix=fitz.Matrix(2, 2))
                pix.save(output_path)
                doc.close()
                return output_path
                
            elif ext in ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']:
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º PIL
                img = Image.open(file_path)
                img.thumbnail((800, 600))  # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                img.save(output_path, 'PNG')
                return output_path
                
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–µ–≤—å—é –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ
                return None

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")
            return None
    
    def get_preview_pixmap(self, file_path):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç QPixmap —Å –ø—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        preview_path = self.create_preview(file_path)
        if preview_path and os.path.exists(preview_path):
            pixmap = QPixmap(preview_path)
            if not pixmap.isNull():
                return pixmap
        return None
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–µ–≤—å—é"""
        try:
            shutil.rmtree(self.cache_dir)
            os.makedirs(self.cache_dir, exist_ok=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø—Ä–µ–≤—å—é: {e}")

class OpenFileThread(QThread):
    finished = pyqtSignal()
    
    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path
    
    def run(self):
        try:
            if sys.platform == 'win32':
                os.startfile(self.file_path)
            elif sys.platform == 'darwin':
                os.system(f'open "{self.file_path}"')
            else:
                os.system(f'xdg-open "{self.file_path}"')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {e}")
        finally:
            self.finished.emit()

class SettingsDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setFixedSize(600, 500)
        
        self.parent = parent
        self.init_ui()
        self.load_data()
    
    def init_ui(self):
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        tabs = QTabWidget()
        layout.addWidget(tabs)
        
        # –í–∫–ª–∞–¥–∫–∞ Telegram
        self.telegram_tab = QWidget()
        telegram_layout = QVBoxLayout(self.telegram_tab)
        
        telegram_info = QLabel(
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Archive:\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather\n"
            "2. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ chat_id —á–µ—Ä–µ–∑ @username_to_id_bot\n"
            "5. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ:"
        )
        telegram_info.setWordWrap(True)
        telegram_info.setStyleSheet("padding: 10px; background-color: #2b5278; border-radius: 5px; color: white;")
        telegram_layout.addWidget(telegram_info)
        
        telegram_form = QFormLayout()
        
        self.telegram_token_edit = QLineEdit()
        self.telegram_token_edit.setPlaceholderText("1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
        self.telegram_token_edit.setText(os.getenv('TELEGRAM_BOT_TOKEN', ''))
        
        self.telegram_chat_id_edit = QLineEdit()
        self.telegram_chat_id_edit.setPlaceholderText("@channel_name –∏–ª–∏ -1001234567890")
        self.telegram_chat_id_edit.setText(os.getenv('TELEGRAM_CHAT_ID', ''))
        
        telegram_form.addRow("Bot Token:", self.telegram_token_edit)
        telegram_form.addRow("Chat ID:", self.telegram_chat_id_edit)
        
        test_telegram_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        test_telegram_btn.clicked.connect(self.test_telegram_connection)
        
        telegram_layout.addLayout(telegram_form)
        telegram_layout.addWidget(test_telegram_btn)
        telegram_layout.addStretch()
        
        # –í–∫–ª–∞–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        self.senders_tab = QWidget()
        self.senders_layout = QVBoxLayout(self.senders_tab)
        
        self.senders_table = QTableWidget()
        self.senders_table.setColumnCount(3)
        self.senders_table.setHorizontalHeaderLabels(["ID", "–ò–º—è", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        self.senders_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.senders_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        
        add_sender_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        add_sender_btn.clicked.connect(self.add_sender)
        remove_sender_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ")
        remove_sender_btn.clicked.connect(self.remove_sender)
        
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(add_sender_btn)
        btn_layout.addWidget(remove_sender_btn)
        
        self.senders_layout.addWidget(self.senders_table)
        self.senders_layout.addLayout(btn_layout)
        
        self.executors_tab = QWidget()
        self.executors_layout = QVBoxLayout(self.executors_tab)
        
        self.executors_table = QTableWidget()
        self.executors_table.setColumnCount(3)
        self.executors_table.setHorizontalHeaderLabels(["ID", "–ò–º—è", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        self.executors_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.executors_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        
        add_executor_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        add_executor_btn.clicked.connect(self.add_executor)
        remove_executor_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ")
        remove_executor_btn.clicked.connect(self.remove_executor)
        
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(add_executor_btn)
        btn_layout.addWidget(remove_executor_btn)
        
        self.executors_layout.addWidget(self.executors_table)
        self.executors_layout.addLayout(btn_layout)
        
        tabs.addTab(self.telegram_tab, "Telegram Archive")
        tabs.addTab(self.senders_tab, "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏")
        tabs.addTab(self.executors_tab, "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏")
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def test_telegram_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        token = self.telegram_token_edit.text().strip()
        chat_id = self.telegram_chat_id_edit.text().strip()
        
        if not token or not chat_id:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ token –∏ chat_id")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        os.environ['TELEGRAM_BOT_TOKEN'] = token
        os.environ['TELEGRAM_CHAT_ID'] = chat_id
        
        storage = TelegramStorage()
        if storage.test_connection():
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        data = self.parent.load_data()
        
        self.senders_table.setRowCount(len(data["senders"]))
        for row, sender in enumerate(data["senders"]):
            self.senders_table.setItem(row, 0, QTableWidgetItem(str(sender["id"])))
            self.senders_table.setItem(row, 1, QTableWidgetItem(sender["name"]))
            self.senders_table.setItem(row, 2, QTableWidgetItem(sender.get("description", "")))
        
        self.executors_table.setRowCount(len(data["executors"]))
        for row, executor in enumerate(data["executors"]):
            self.executors_table.setItem(row, 0, QTableWidgetItem(str(executor["id"])))
            self.executors_table.setItem(row, 1, QTableWidgetItem(executor["name"]))
            self.executors_table.setItem(row, 2, QTableWidgetItem(executor.get("description", "")))
    
    def add_sender(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        dialog.setFixedSize(300, 150)
        
        layout = QFormLayout()
        dialog.setLayout(layout)
        
        name_edit = QLineEdit()
        description_edit = QLineEdit()
        
        layout.addRow("–ò–º—è:", name_edit)
        layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_edit)
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(dialog.accept)
        button_box.rejected.connect(dialog.reject)
        
        layout.addRow(button_box)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            name = name_edit.text().strip()
            if not name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            data = self.parent.load_data()
            if any(s["name"].lower() == name.lower() for s in data["senders"]):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            new_id = max(s["id"] for s in data["senders"]) + 1 if data["senders"] else 1
            new_sender = {
                "id": new_id,
                "name": name,
                "description": description_edit.text(),
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            data["senders"].append(new_sender)
            self.parent.save_data(data)
            self.load_data()
    
    def remove_sender(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        selected = self.senders_table.currentRow()
        if selected == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        sender_id = int(self.senders_table.item(selected, 0).text())
        sender_name = self.senders_table.item(selected, 1).text()
        
        reply = QMessageBox.question(
            self, 
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è "{sender_name}"?', 
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            data = self.parent.load_data()
            data["senders"] = [s for s in data["senders"] if s["id"] != sender_id]
            self.parent.save_data(data)
            self.load_data()
    
    def add_executor(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        dialog.setFixedSize(300, 150)
        
        layout = QFormLayout()
        dialog.setLayout(layout)
        
        name_edit = QLineEdit()
        description_edit = QLineEdit()
        
        layout.addRow("–ò–º—è:", name_edit)
        layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_edit)
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(dialog.accept)
        button_box.rejected.connect(dialog.reject)
        
        layout.addRow(button_box)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            name = name_edit.text().strip()
            if not name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            data = self.parent.load_data()
            if any(e["name"].lower() == name.lower() for e in data["executors"]):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            new_id = max(e["id"] for e in data["executors"]) + 1 if data["executors"] else 1
            new_executor = {
                "id": new_id,
                "name": name,
                "description": description_edit.text(),
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            data["executors"].append(new_executor)
            self.parent.save_data(data)
            self.load_data()
    
    def remove_executor(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        selected = self.executors_table.currentRow()
        if selected == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        executor_id = int(self.executors_table.item(selected, 0).text())
        executor_name = self.executors_table.item(selected, 1).text()
        
        reply = QMessageBox.question(
            self, 
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è "{executor_name}"?', 
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            data = self.parent.load_data()
            data["executors"] = [e for e in data["executors"] if e["id"] != executor_id]
            self.parent.save_data(data)
            self.load_data()

    def accept(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤ .env —Ñ–∞–π–ª
        token = self.telegram_token_edit.text().strip()
        chat_id = self.telegram_chat_id_edit.text().strip()
        
        if token and chat_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
            env_lines = []
            if os.path.exists('.env'):
                with open('.env', 'r', encoding='utf-8') as f:
                    env_lines = f.readlines()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            updated = False
            for i, line in enumerate(env_lines):
                if line.startswith('TELEGRAM_BOT_TOKEN='):
                    env_lines[i] = f'TELEGRAM_BOT_TOKEN={token}\n'
                    updated = True
                elif line.startswith('TELEGRAM_CHAT_ID='):
                    env_lines[i] = f'TELEGRAM_CHAT_ID={chat_id}\n'
                    updated = True
            
            if not updated:
                env_lines.append(f'TELEGRAM_BOT_TOKEN={token}\n')
                env_lines.append(f'TELEGRAM_CHAT_ID={chat_id}\n')
            
            with open('.env', 'w', encoding='utf-8') as f:
                f.writelines(env_lines)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ['TELEGRAM_BOT_TOKEN'] = token
            os.environ['TELEGRAM_CHAT_ID'] = chat_id
        
        super().accept()


class DocumentUploadDialog(QDialog):
    def __init__(self, doc_type, parent=None):
        super().__init__(parent)
        self.setWindowTitle(f"–î–µ—Ç–∞–ª–∏ {'–≤—Ö–æ–¥—è—â–µ–≥–æ' if doc_type == 'incoming' else '–∏—Å—Ö–æ–¥—è—â–µ–≥–æ'} –ø–∏—Å—å–º–∞")
        self.setFixedSize(300, 200)
        
        layout = QFormLayout()
        self.setLayout(layout)
        
        self.doc_number = QLineEdit()
        self.doc_date = QLineEdit()
        self.doc_date.setPlaceholderText("–î–î.–ú–ú.–ì–ì–ì–ì")
        
        layout.addRow("–ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞:", self.doc_number)
        layout.addRow("–î–∞—Ç–∞ –ø–∏—Å—å–º–∞:", self.doc_date)
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        
        layout.addRow(button_box)
    
    def get_data(self):
        return {
            "doc_number": self.doc_number.text().strip(),
            "doc_date": self.doc_date.text().strip()
        }

class SyncTelegramThread(QThread):
    progress = pyqtSignal(str)
    finished = pyqtSignal(bool, str)
    
    def __init__(self, telegram_storage, data_file, base_dir):
        super().__init__()
        self.telegram_storage = telegram_storage
        self.data_file = data_file
        self.base_dir = base_dir
    
    def run(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å Telegram –∞—Ä—Ö–∏–≤–æ–º"""
        try:
            self.progress.emit("üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            with open(self.data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            local_docs = {doc['filename']: doc for doc in data['documents']}
            
            self.progress.emit("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...")
            telegram_files = self.telegram_storage.get_channel_files()
            
            new_docs_count = 0
            for tg_file in telegram_files:
                filename = tg_file['file_name']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
                if filename not in local_docs:
                    self.progress.emit(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {filename}")
                    
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    temp_path = os.path.join(self.base_dir, "temp", filename)
                    os.makedirs(os.path.dirname(temp_path), exist_ok=True)
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    if self.telegram_storage.download_file(tg_file['file_id'], temp_path):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ caption
                        caption = tg_file.get('caption', '')
                        doc_type = 'incoming' if '–í—Ö–æ–¥—è—â–∏–π' in caption else 'outgoing'
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        new_doc = {
                            'filename': filename,
                            'type': doc_type,
                            'path': temp_path,
                            'telegram_file_id': tg_file['file_id'],
                            'telegram_message_id': tg_file.get('message_id'),
                            'date': datetime.fromtimestamp(tg_file['date']).strftime("%Y-%m-%d %H:%M:%S"),
                            'size': os.path.getsize(temp_path)
                        }
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ caption
                        if '–ù–æ–º–µ—Ä:' in caption:
                            import re
                            number_match = re.search(r'–ù–æ–º–µ—Ä:\s*([^\n]+)', caption)
                            if number_match:
                                new_doc['doc_number'] = number_match.group(1).strip()
                        
                        if '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:' in caption:
                            sender_match = re.search(r'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:\s*([^\n]+)', caption)
                            if sender_match:
                                new_doc['sender'] = sender_match.group(1).strip()
                        
                        if '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:' in caption:
                            executor_match = re.search(r'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:\s*([^\n]+)', caption)
                            if executor_match:
                                new_doc['executor'] = executor_match.group(1).strip()
                        
                        data['documents'].append(new_doc)
                        new_docs_count += 1
            
            if new_docs_count > 0:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                with open(self.data_file, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)
                
                self.finished.emit(True, f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {new_docs_count} –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            else:
                self.finished.emit(True, "‚ÑπÔ∏è –ù–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            self.finished.emit(False, f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")

class DocumentManager(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ê—Ä—Ö–∏–≤ Telegram")
        self.setGeometry(100, 100, 1000, 600)
        
        self.base_dir = os.path.join(os.path.dirname(__file__), "–î–æ–∫—É–º–µ–Ω—Ç—ã –∞—Ä—Ö–∏–≤–∞")
        self.documents_dir = os.path.join(self.base_dir, "–î–æ–∫—É–º–µ–Ω—Ç—ã")
        self.incoming_dir = os.path.join(self.base_dir, "–í—Ö–æ–¥—è—â–µ–µ")
        self.outgoing_dir = os.path.join(self.base_dir, "–ò—Å—Ö–æ–¥—è—â–µ–µ")
        self.executors_dir = os.path.join(self.base_dir, "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏")
        
        os.makedirs(self.documents_dir, exist_ok=True)
        os.makedirs(self.incoming_dir, exist_ok=True)
        os.makedirs(self.outgoing_dir, exist_ok=True)
        os.makedirs(self.executors_dir, exist_ok=True)
        
        self.data_file = os.path.join(self.base_dir, "data.json")
        self.init_data()

        self.preview_manager = PreviewManager()
        self.preview_thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Storage
        self.telegram_storage = TelegramStorage()
        
        self.init_ui()
        self.migrate_data()
        self.load_documents()
        self.showMaximized()

    def init_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        if not os.path.exists(self.data_file):
            data = {
                "documents": [],
                "senders": [],
                "executors": [],
                "current_user": None
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        with open(self.data_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def save_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    
    def update_preview(self, file_path):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            if self.preview_thread and self.preview_thread.isRunning():
                self.preview_thread.quit()
                self.preview_thread.wait()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
            self.preview_thread = PreviewThread(file_path, self.preview_manager)
            self.preview_thread.preview_generated.connect(self.on_preview_generated)
            self.preview_thread.start()
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
            self.preview_widget.clear()
            self.preview_widget.setText("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é...")
            self.preview_widget.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    background-color: rgba(255, 255, 255, 0.1);
                    border: 1px solid #4a6fa5;
                    border-radius: 5px;
                }
            """)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –ø—Ä–µ–≤—å—é: {e}")
            self.clear_preview()

    def on_preview_generated(self, file_path, result):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–≤—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
        current_item = self.documents_list.currentItem()
        if current_item and current_item.data(Qt.ItemDataRole.UserRole)["path"] == file_path:
            if isinstance(result, QPixmap) and not result.isNull():
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –≤–∏–¥–∂–µ—Ç–∞
                scaled_pixmap = result.scaled(
                    self.preview_widget.width() - 20, 
                    self.preview_widget.height() - 20,
                    Qt.AspectRatioMode.KeepAspectRatio,
                    Qt.TransformationMode.SmoothTransformation
                )
                self.preview_widget.setPixmap(scaled_pixmap)
                # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.preview_widget.setStyleSheet("""
                    QLabel {
                        background-color: rgba(255, 255, 255, 0.1);
                        border: 1px solid #4a6fa5;
                        border-radius: 5px;
                    }
                """)
            else:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                self.preview_widget.clear()
                self.preview_widget.setText("üìÑ")
                self.preview_widget.setStyleSheet("""
                    QLabel {
                        font-size: 100px;
                        background-color: rgba(255, 255, 255, 0.1);
                        border: 1px solid #4a6fa5;
                        border-radius: 5px;
                    }
                """)

    def clear_preview(self):
        """–û—á–∏—â–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –ø—Ä–µ–≤—å—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–º–∞–π–ª–∏–∫"""
        self.preview_widget.clear()
        self.preview_widget.setText("üìÑ")
        self.preview_widget.setStyleSheet("""
            QLabel {
                font-size: 100px;
                background-color: rgba(255, 255, 255, 0.1);
                border: 1px solid #4a6fa5;
                border-radius: 5px;
            }
        """)    

    def sync_with_telegram(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Telegram –∞—Ä—Ö–∏–≤–æ–º"""
        if not self.telegram_storage.test_connection():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_dialog = QDialog(self)
        progress_dialog.setWindowTitle("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Telegram")
        progress_dialog.setFixedSize(400, 150)
        
        layout = QVBoxLayout()
        progress_dialog.setLayout(layout)
        
        progress_label = QLabel("–ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        progress_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(progress_label)
        
        progress_dialog.show()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_thread = SyncTelegramThread(
            self.telegram_storage, 
            self.data_file, 
            self.base_dir
        )
        
        self.sync_thread.progress.connect(progress_label.setText)
        self.sync_thread.finished.connect(
            lambda success, msg: self.on_sync_finished(success, msg, progress_dialog)
        )
        self.sync_thread.start()

    def on_sync_finished(self, success, message, progress_dialog):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        progress_dialog.close()
        
        if success:
            QMessageBox.information(self, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", message)
            self.load_documents()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", message)

    def upload_to_telegram(self, file_path, doc_type, doc_data):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram –∫–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            if not self.telegram_storage.test_connection():
                return False
            
            metadata = {
                'filename': doc_data['filename'],
                'type': doc_type,
                'doc_number': doc_data.get('doc_number', ''),
                'doc_date': doc_data.get('doc_date', ''),
                'sender': doc_data.get('sender', ''),
                'executor': doc_data.get('executor', '')
            }
            
            result = self.telegram_storage.upload_file(file_path, metadata)
            
            if result['success']:
                doc_data['telegram_file_id'] = result['file_id']
                doc_data['telegram_message_id'] = result['message_id']
                print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (message_id: {result['message_id']})")
                return True
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Telegram: {result.get('error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Telegram: {e}")
            return False

    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        left_panel = QWidget()
        left_panel.setFixedWidth(200)
        left_layout = QVBoxLayout(left_panel)
        left_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        ######################
        #png-—à–∫–∞ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, –º–Ω–æ–≥–æ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–¥–∞–ª—é –≤ –∫–æ–Ω—Ü–µ, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
        logo_label = QLabel()
        logo_pixmap = QPixmap("name.png")

        if not logo_pixmap.isNull():
            logo_pixmap = logo_pixmap.scaled(200, 200, Qt.AspectRatioMode.KeepAspectRatio, 
                                        Qt.TransformationMode.SmoothTransformation)
            logo_label.setPixmap(logo_pixmap)
            logo_label.setAlignment(Qt.AlignmentFlag.AlignBottom | Qt.AlignmentFlag.AlignCenter)
            logo_label.setStyleSheet("background: transparent;")
            left_layout.addWidget(logo_label)

        ###########################
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–ê—Ä—Ö–∏–≤ Telegram")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: white;
                padding: 10px;
                background-color: rgba(0, 0, 0, 0.2);
                border-radius: 5px;
            }
        """)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        left_layout.addWidget(title_label)
        
        # –°—Ç–∞—Ç—É—Å Telegram
        self.telegram_status_label = QLabel()
        self.update_telegram_status()
        self.telegram_status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.telegram_status_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                padding: 5px;
                border-radius: 3px;
                margin: 5px;
            }
        """)
        left_layout.addWidget(self.telegram_status_label)
        
        buttons = [
            ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", self.upload_document),
            ("–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", self.delete_document),
            ("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Telegram", self.sync_with_telegram)
        ]
        
        for text, handler in buttons:
            btn = QPushButton(text)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: %s;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                    margin-top: 10px;
                }
                QPushButton:hover {
                    background-color: %s;
                }
                QPushButton:pressed {
                    background-color: %s;
                }
            """ % (
                "#5a5a5a" if text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" else "#4a6fa5",
                "#6a6a6a" if text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" else "#5a7fb5",
                "#4a4a4a" if text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" else "#3a5f95"
            ))
            btn.setFixedHeight(40)
            btn.clicked.connect(handler)
            left_layout.addWidget(btn)

        left_layout.addStretch()
        buttons = [
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.open_settings)
        ]
        for text, handler in buttons:
            btn = QPushButton(text)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: %s;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                    margin-top: 10px;
                }
                QPushButton:hover {
                    background-color: %s;
                }
                QPushButton:pressed {
                    background-color: %s;
                }
            """ % (
                "#5a5a5a" if text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" else "#4a6fa5",
                "#6a6a6a" if text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" else "#5a7fb5",
                "#4a4a4a" if text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" else "#3a5f95"
            ))
            btn.setFixedHeight(40)
            btn.clicked.connect(handler)
            left_layout.addWidget(btn)

        center_panel = QWidget()
        center_layout = QVBoxLayout(center_panel)
        
        filter_panel = QWidget()
        filter_layout = QHBoxLayout(filter_panel)
        
        self.filter_combo = QComboBox()
        self.filter_combo.addItems(["–í—Å–µ", "–í—Ö–æ–¥—è—â–∏–µ", "–ò—Å—Ö–æ–¥—è—â–∏–µ"])
        self.filter_combo.currentTextChanged.connect(self.apply_filters)
        
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("–ü–æ–∏—Å–∫...")
        self.search_edit.textChanged.connect(self.apply_filters)
        
        filter_layout.addWidget(self.filter_combo)
        filter_layout.addWidget(self.search_edit)
        
        center_layout.addWidget(filter_panel)
        
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: 2px solid #4a6fa5;
                border-radius: 5px;
                background-color: rgba(255, 255, 255, 0.1);
            }
            QScrollBar:vertical {
                width: 15px;
                background: rgba(255, 255, 255, 0.1);
            }
            QScrollBar::handle:vertical {
                background: #4a6fa5;
                min-height: 20px;
                border-radius: 5px;
            }
        """)
        
        self.documents_list = QListWidget()
        self.documents_list.setStyleSheet("""
            QListWidget {
                background-color: rgba(255, 255, 255, 0.05);
                color: white;
                font-size: 14px;
                border: none;
            }
            QListWidget::item {
                padding: 10px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }
            QListWidget::item:hover {
                background-color: rgba(255, 255, 255, 0.1);
            }
            QListWidget::item:selected {
                background-color: #4a6fa5;
            }
        """)
        self.documents_list.itemDoubleClicked.connect(self.open_document_threaded)
        self.documents_list.itemClicked.connect(self.show_document_info)
        scroll_area.setWidget(self.documents_list)
        
        center_layout.addWidget(scroll_area)
        
        right_panel = QWidget()
        right_panel.setFixedWidth(350)
        right_layout = QVBoxLayout(right_panel)
        
        self.preview_widget = QLabel()
        self.preview_widget.setFixedSize(300, 300)
        self.preview_widget.setStyleSheet("""
            QLabel {
                background-color: rgba(255, 255, 255, 0.1);
                border: 1px solid #4a6fa5;
                border-radius: 5px;
            }
        """)
        self.preview_widget.setAlignment(Qt.AlignmentFlag.AlignCenter)
        right_layout.addWidget(self.preview_widget)
        
        info_title = QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        info_title.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: white;
                padding: 10px;
                background-color: rgba(0, 0, 0, 0.2);
                border-radius: 5px;
            }
        """)
        info_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        right_layout.addWidget(info_title)
        
        # –û–±–ª–∞—Å—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.info_widget = QWidget()
        self.info_layout = QFormLayout(self.info_widget)
        self.info_layout.setVerticalSpacing(8)
        self.info_layout.setContentsMargins(15, 10, 10, 10)
        
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ", "name_label"),
            ("–¢–∏–ø", "type_label"),
            ("–ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞", "doc_number_label"),
            ("–î–∞—Ç–∞ –ø–∏—Å—å–º–∞", "doc_date_label"),
            ("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "sender_label"),
            ("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "executor_label"),
            ("–†–∞–∑–º–µ—Ä", "size_label"),
            ("–ü—É—Ç—å", "path_label"),
            ("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "date_label"),
        ]
        
        for field_name, field_var in fields:
            label = QLabel(field_name + ":")
            label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    color: white;
                    font-weight: bold;
                }
            """)
            
            value_label = QLabel("-")
            value_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    color: white;
                    margin: 2px;
                    padding: 2px;
                }
            """)
            value_label.setWordWrap(True)
            value_label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
            value_label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.MinimumExpanding)
            
            setattr(self, field_var, value_label)
            self.info_layout.addRow(label, value_label)
        
        right_layout.addWidget(self.info_widget)
        right_layout.addStretch()
        
        main_layout.addWidget(left_panel)
        main_layout.addWidget(center_panel)
        main_layout.addWidget(right_panel)
        
        # –°—Ç–∏–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                        stop:0 #614385, stop:1 #516395);
            }
            QLineEdit, QComboBox {
                background-color: rgba(255, 255, 255, 0.1);
                color: white;
                border: 1px solid #4a6fa5;
                border-radius: 3px;
                padding: 5px;
            }
            QComboBox QAbstractItemView {
                background-color: #516395;
                color: white;
                selection-background-color: #4a6fa5;
            }
        """)
    
    def update_telegram_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        if self.telegram_storage.test_connection():
            self.telegram_status_label.setText("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.telegram_status_label.setStyleSheet("""
                QLabel {
                    background-color: #2d7d46;
                    color: white;
                    font-size: 12px;
                    padding: 5px;
                    border-radius: 3px;
                }
            """)
        else:
            self.telegram_status_label.setText("‚ùå Telegram –æ—Ç–∫–ª—é—á–µ–Ω")
            self.telegram_status_label.setStyleSheet("""
                QLabel {
                    background-color: #c42b1c;
                    color: white;
                    font-size: 12px;
                    padding: 5px;
                    border-radius: 3px;
                }
            """)
    
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        dialog = SettingsDialog(self)
        dialog.exec()
        self.update_telegram_status()
        self.load_documents()
    
    def apply_filters(self):
        """—Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        search_text = self.search_edit.text().lower()
        filter_type = self.filter_combo.currentText()
        
        for i in range(self.documents_list.count()):
            item = self.documents_list.item(i)
            doc = item.data(Qt.ItemDataRole.UserRole)
            visible = True
            
            # –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if search_text:
                search_fields = [
                    doc["filename"].lower(),
                    doc.get("sender", "").lower(),
                    doc.get("executor", "").lower(),
                    doc.get("doc_number", "").lower(),
                    doc.get("doc_date", "").lower(),
                    doc.get("description", "").lower()
                ]
                if not any(search_text in field for field in search_fields):
                    visible = False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
            if visible and filter_type != "–í—Å–µ":
                if filter_type == "–í—Ö–æ–¥—è—â–∏–µ" and doc["type"] != "incoming":
                    visible = False
                elif filter_type == "–ò—Å—Ö–æ–¥—è—â–∏–µ" and doc["type"] != "outgoing":
                    visible = False
            
            item.setHidden(not visible)

    def load_documents(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        data = self.load_data()
        self.documents_list.clear()
        
        for doc in data["documents"]:
            item = QListWidgetItem(doc["filename"])
            item.setData(Qt.ItemDataRole.UserRole, doc)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ –Ω–∞–ª–∏—á–∏—è –≤ Telegram
            if doc.get('telegram_file_id'):
                item.setIcon(QIcon.fromTheme("cloud-upload"))  # –ò–∫–æ–Ω–∫–∞ –æ–±–ª–∞–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ Telegram
                item.setForeground(Qt.GlobalColor.green)
            else:
                item.setForeground(Qt.GlobalColor.white)
            
            if doc['filename'].lower().endswith('.pdf'):
                item.setIcon(QIcon.fromTheme("application-pdf"))
            elif doc['filename'].lower().endswith(('.png', '.jpg', '.jpeg')):
                item.setIcon(QIcon.fromTheme("image-x-generic"))
            else:
                item.setIcon(QIcon.fromTheme("text-x-generic"))
            
            self.documents_list.addItem(item)

    def upload_document(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        type_dialog = QDialog(self)
        type_dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        type_dialog.setFixedSize(300, 150)
        
        layout = QVBoxLayout()
        type_dialog.setLayout(layout)
        
        label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
        incoming_btn = QPushButton("–í—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ")
        outgoing_btn = QPushButton("–ò—Å—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ")
        
        incoming_btn.clicked.connect(lambda: self.process_document_upload("incoming", type_dialog))
        outgoing_btn.clicked.connect(lambda: self.process_document_upload("outgoing", type_dialog))
        
        layout.addWidget(label)
        layout.addWidget(incoming_btn)
        layout.addWidget(outgoing_btn)
        
        type_dialog.exec()
    
    def process_document_upload(self, doc_type, type_dialog):
        """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        type_dialog.close()
        
        # 1. –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
            "",
            "–î–æ–∫—É–º–µ–Ω—Ç—ã (*.pdf *.doc *.docx *.txt);;–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        
        if not file_path:
            return
        
        # 2. –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        upload_dialog = DocumentUploadDialog(doc_type, self)
        if upload_dialog.exec() != QDialog.DialogCode.Accepted:
            return
        
        doc_details = upload_dialog.get_data()
        if not doc_details["doc_number"]:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            return
        
        filename = os.path.basename(file_path)
        data = self.load_data()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        for doc in data['documents']:
            if doc['filename'].lower() == filename.lower() and doc['type'] == doc_type:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏ —Ç–∏–ø–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
        
        # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_data = {
            'filename': filename,
            'type': doc_type,
            'doc_number': doc_details['doc_number'],
            'doc_date': doc_details['doc_date'],
            'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'size': int(os.path.getsize(file_path))
        }

        try:
            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if doc_type == "incoming":
                sender = self.select_or_create_entity("sender", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
                if not sender:
                    return
                
                doc_data['sender'] = sender
                doc_data['sender_id'] = next(s["id"] for s in data["senders"] if s["name"] == sender)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
                sender_dir = os.path.join(self.incoming_dir, sender)
                os.makedirs(sender_dir, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                local_path = os.path.join(sender_dir, filename)
                shutil.copy2(file_path, local_path)
                
            elif doc_type == "outgoing":
                executor = self.select_or_create_entity("executor", "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
                if not executor:
                    return
                
                doc_data['executor'] = executor
                doc_data['executor_id'] = next(e["id"] for e in data["executors"] if e["name"] == executor)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
                executor_dir = os.path.join(self.executors_dir, executor)
                os.makedirs(executor_dir, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                local_path = os.path.join(executor_dir, filename)
                shutil.copy2(file_path, local_path)
            
            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            doc_data['path'] = local_path
            
            # 6. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Telegram —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            telegram_success = self.upload_to_telegram(local_path, doc_type, doc_data)
            if telegram_success:
                print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram")
            else:
                print("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram")
            
            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            data['documents'].append(doc_data)
            self.save_data(data)
            
            # 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.load_documents()
            
            message = f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:\n–ù–æ–º–µ—Ä: {doc_details['doc_number']}\n–î–∞—Ç–∞: {doc_details['doc_date']}\n–†–∞–∑–º–µ—Ä: {doc_data['size']/1024:.1f} KB"
            if telegram_success:
                message += "\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram"
            else:
                message += "\n‚ö†Ô∏è –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram"
            
            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", message)
            
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'local_path' in locals() and os.path.exists(local_path):
                os.remove(local_path)
                
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç:\n{str(e)}"
            )
        
    def select_or_create_entity(self, entity_type, select_title, create_title):
        """–í—ã–±–æ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        data = self.load_data()
        entities = data[f"{entity_type}s"]
        
        dialog = QDialog(self)
        dialog.setWindowTitle(select_title)
        dialog.setFixedSize(300, 200)
        
        layout = QVBoxLayout()
        dialog.setLayout(layout)
        
        entity_list = QListWidget()
        for entity in entities:
            entity_list.addItem(entity["name"])
        
        # –ö–Ω–æ–ø–æ—á–∫–∏
        btn_layout = QHBoxLayout()
        select_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å")
        create_btn = QPushButton(create_title)
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        
        select_btn.clicked.connect(dialog.accept)
        create_btn.clicked.connect(lambda: self.create_new_entity(entity_type, dialog))
        cancel_btn.clicked.connect(dialog.reject)
        
        btn_layout.addWidget(select_btn)
        btn_layout.addWidget(create_btn)
        btn_layout.addWidget(cancel_btn)
        
        layout.addWidget(entity_list)
        layout.addLayout(btn_layout)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            if entity_list.currentItem():
                return entity_list.currentItem().text()
        
        return None
    
    def create_new_entity(self, entity_type, parent_dialog):
        parent_dialog.close()
        
        dialog = QDialog(self)
        dialog.setWindowTitle(f"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ {entity_type}")
        dialog.setFixedSize(300, 150)
        
        layout = QFormLayout()
        dialog.setLayout(layout)
        
        name_edit = QLineEdit()
        description_edit = QLineEdit()
        
        layout.addRow("–ò–º—è:", name_edit)
        layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_edit)
        
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(dialog.accept)
        button_box.rejected.connect(dialog.reject)
        
        layout.addRow(button_box)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            name = name_edit.text().strip()
            if not name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return None
            
            data = self.load_data()
            entities = data[f"{entity_type}s"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º
            if any(e["name"].lower() == name.lower() for e in entities):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"{entity_type} —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return None
            
            new_entity = {
                "id": len(entities) + 1,
                "name": name,
                "description": description_edit.text(),
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            entities.append(new_entity)
            self.save_data(data)
            
            if entity_type == "executor":
                executor_dir = os.path.join(self.executors_dir, name)
                os.makedirs(executor_dir, exist_ok=True)
            
            elif entity_type == "sender":
                sender_dir = os.path.join(self.incoming_dir, name)
                os.makedirs(sender_dir, exist_ok=True)
            
            return name
        
        return None
    
    def delete_document(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not (selected_item := self.documents_list.currentItem()):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        doc = selected_item.data(Qt.ItemDataRole.UserRole)
        filename = doc["filename"]
        
        reply = QMessageBox.question(
            self, 
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}?\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ, –≤ Telegram –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.', 
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply != QMessageBox.StandardButton.Yes:
            return
        
        try:
            if os.path.exists(doc.get("path", "")):
                os.remove(doc["path"])
            
            data = self.load_data()
            data["documents"] = [
                d for d in data["documents"] 
                if not (d["filename"] == filename and 
                    d.get("type") == doc.get("type") and 
                    d.get("doc_number") == doc.get("doc_number"))
            ]
            self.save_data(data)
            
            self.load_documents()
            self.clear_document_info()
            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def open_document_threaded(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        selected_item = self.documents_list.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
            return
        
        doc = selected_item.data(Qt.ItemDataRole.UserRole)
        file_path = doc["path"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏–∑ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å file_id
            if doc.get('telegram_file_id'):
                reply = QMessageBox.question(
                    self,
                    "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {doc['filename']} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –∏–∑ Telegram?",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                )
                
                if reply == QMessageBox.StandardButton.Yes:
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑ Telegram
                    temp_dir = os.path.join(self.base_dir, "temp")
                    os.makedirs(temp_dir, exist_ok=True)
                    temp_path = os.path.join(temp_dir, doc['filename'])
                    
                    if self.telegram_storage.download_file(doc['telegram_file_id'], temp_path):
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –±–∞–∑–µ
                        data = self.load_data()
                        for d in data['documents']:
                            if (d['filename'] == doc['filename'] and 
                                d.get('type') == doc.get('type') and 
                                d.get('doc_number') == doc.get('doc_number')):
                                d['path'] = temp_path
                                break
                        
                        self.save_data(data)
                        file_path = temp_path
                    else:
                        QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram")
                        return
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª {doc['filename']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        self.open_thread = OpenFileThread(file_path)
        self.open_thread.start()

    def show_document_info(self, item):
        """–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏ –µ–≥–æ –ø—Ä–µ–≤—å—é"""
        if not item:
            return
            
        doc = item.data(Qt.ItemDataRole.UserRole)
        if not doc:
            return
        
        try:
            filename = doc.get("filename", "-")
            path = doc.get("path", "-")
            doc_type = doc.get("type", "")
            doc_number = doc.get("doc_number", "-")
            doc_date = doc.get("doc_date", "-")
            sender = doc.get("sender", "-")
            executor = doc.get("executor", "-")
            date_added = doc.get("date", "-")
            telegram_id = doc.get("telegram_file_id", "-")
            
            try:
                size_bytes = int(doc.get("size", 0))
                if size_bytes >= 1024 * 1024:  # –ë–æ–ª—å—à–µ 1 MB
                    size_text = f"{size_bytes/(1024*1024):.2f} MB"
                elif size_bytes >= 1024:  # –ë–æ–ª—å—à–µ 1 KB
                    size_text = f"{size_bytes/1024:.2f} KB"
                else:
                    size_text = f"{size_bytes} B"
            except (ValueError, TypeError):
                size_text = "0 B"

            self.name_label.setText(filename)
            self.path_label.setText(path)
            self.type_label.setText("–í—Ö–æ–¥—è—â–∏–π" if doc_type == "incoming" else "–ò—Å—Ö–æ–¥—è—â–∏–π")
            self.doc_number_label.setText(doc_number)
            self.doc_date_label.setText(doc_date)
            self.sender_label.setText(sender)
            self.executor_label.setText(executor)
            self.size_label.setText(size_text)
            self.date_label.setText(date_added)
            self.telegram_id_label.setText(telegram_id if telegram_id != "-" else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            self.update_preview(path)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            for label in [self.name_label, self.path_label, self.type_label,
                        self.doc_number_label, self.doc_date_label,
                        self.sender_label, self.executor_label,
                        self.size_label, self.date_label, self.telegram_id_label]:
                label.setText("-")
            self.clear_preview()

    def resizeEvent(self, event):
        super().resizeEvent(event)
        if hasattr(self, 'documents_list') and self.documents_list.currentItem():
            current_item = self.documents_list.currentItem()
            if current_item:
                doc = current_item.data(Qt.ItemDataRole.UserRole)
                if doc and "path" in doc:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–≤—å—é
                    pixmap = self.preview_widget.pixmap()
                    if pixmap and not pixmap.isNull():
                        scaled_pixmap = pixmap.scaled(
                            self.preview_widget.width() - 20, 
                            self.preview_widget.height() - 20,
                            Qt.AspectRatioMode.KeepAspectRatio,
                            Qt.TransformationMode.SmoothTransformation
                        )
                        self.preview_widget.setPixmap(scaled_pixmap)

    def clear_document_info(self):
        self.name_label.setText("-")
        self.type_label.setText("-")
        self.sender_label.setText("-")
        self.executor_label.setText("-")
        self.size_label.setText("-")
        self.path_label.setText("-")
        self.date_label.setText("-")
        self.doc_number_label.setText("-")
        self.doc_date_label.setText("-")
        self.telegram_id_label.setText("-")
        self.clear_preview()
                
    def show_full_path(self):
        if hasattr(self, 'documents_list') and self.documents_list.currentItem():
            doc = self.documents_list.currentItem().data(Qt.ItemDataRole.UserRole)
            QMessageBox.information(self, "–ü–æ–ª–Ω—ã–π –ø—É—Ç—å", doc["path"])
    
    def migrate_data(self):
        data = self.load_data()
        changed = False
        
        for doc in data["documents"]:
            if isinstance(doc.get("size"), str):
                try:
                    doc["size"] = int(doc["size"])
                    changed = True
                except (ValueError, TypeError):
                    doc["size"] = 0
                    changed = True
        if changed:
            self.save_data(data)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    window = DocumentManager()
    window.show()
    sys.exit(app.exec())